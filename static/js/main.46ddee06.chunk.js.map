{"version":3,"sources":["serviceWorkerRegistration.ts","webpack:///./src/ui/icon.svg?514c","ui/components/Landing.tsx","dictionary/index.ts","state/index.ts","ui/components/Results.tsx","ui/icon.svg","ui/components/SearchBar.tsx","ui/components/Home.tsx","ui/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","Promise","resolve","addEventListener","then","alert","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","id","cx","cy","r","fill","stroke","strokeWidth","SvgIcon","_ref","svgRef","title","titleId","props","xmlns","viewBox","ref","ForwardRef","Landing","useState","canInstall","setCanInstall","installPromptEvent","setInstallPromptEvent","history","useHistory","useEffect","handler","e","preventDefault","removeEventListener","handleInstall","useCallback","matchMedia","matches","prompt","catch","console","error","className","onClick","initDB","a","openDB","upgrade","db","_","version","log","allKanji","createObjectStore","keyPath","allPhrases","queryStore","createIndex","multiEntry","all","map","transaction","done","store","query","loadingResults","results","request","dbPromise","makeAutoObservable","updateFactory","Function","fetchResults","runInAction","requestID","fetchSequenceNumbers","sequenceNumbers","tx","Array","from","number","get","entry","push","allSequenceNumbers","Set","index","getAll","IDBKeyRange","bound","forEach","reading","add","sequenceNumber","ResultListItem","kanji","sense","sort","b","priority","form","value","join","flatMap","meaning","glossary","ResultList","observer","result","SearchBar","inputRef","useRef","current","focus","handleChange","setQuery","to","src","icon","alt","type","onChange","placeholder","Home","App","basename","path","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46ddee06.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nconst windowLoad = (): Promise<void> => {\n  return new Promise((resolve) => {\n    window.addEventListener('load', () => {\n      resolve()\n    })\n  })\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    windowLoad().then(() => {\n      alert('install')\n      // const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      // if (isLocalhost) {\n      //   // This is running on localhost. Let's check if a service worker still exists or not.\n      //   checkValidServiceWorker(swUrl, config)\n\n      //   // Add some additional logging to localhost, pointing developers to the\n      //   // service worker/PWA documentation.\n      //   navigator.serviceWorker.ready.then(() => {\n      //     console.log(\n      //       'This web app is being served cache-first by a service ' +\n      //         'worker. To learn more, visit https://cra.link/PWA'\n      //     )\n      //   })\n      // } else {\n      //   // Is not localhost. Just register service worker\n      //   registerValidSW(swUrl, config)\n      // }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"White\",\n  cx: 512,\n  cy: 512,\n  r: 507,\n  fill: \"#ffffff\",\n  stroke: \"#cccccc\",\n  strokeWidth: 10\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"Yolk\",\n  cx: 512,\n  cy: 512,\n  r: 200,\n  fill: \"#ffb43b\"\n}));\n\nfunction SvgIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 1024 1024\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgIcon);\nexport default __webpack_public_path__ + \"static/media/icon.b8f19d44.svg\";\nexport { ForwardRef as ReactComponent };","import { FC, useCallback, useEffect, useState } from 'react'\nimport { register } from '../../serviceWorkerRegistration'\nimport { ReactComponent as Icon } from '../icon.svg'\nimport { useHistory } from 'react-router-dom'\nimport './Landing.scss'\n\nexport interface BeforeInstallPromptEvent extends Event {\n  prompt: () => Promise<void>\n}\n\nconst Landing: FC = () => {\n  // Can the UA install PWAs?\n  const [canInstall, setCanInstall] = useState(false)\n  const [\n    installPromptEvent,\n    setInstallPromptEvent\n  ] = useState<BeforeInstallPromptEvent | null>(null)\n  const history = useHistory()\n\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      setCanInstall(true)\n    }\n  }, [])\n\n  useEffect(() => {\n    const handler = (e: Event) => {\n      e.preventDefault()\n\n      setInstallPromptEvent((e as unknown) as BeforeInstallPromptEvent)\n    }\n\n    window.addEventListener('beforeinstallprompt', handler)\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handler)\n    }\n  }, [])\n\n  const handleInstall = useCallback(() => {\n    if (process.env.NODE_ENV === 'development') {\n      setTimeout(() => {\n        history.push('/')\n      }, 1000)\n\n      return\n    }\n\n    register({\n      onSuccess: () => {\n        history.push('/')\n      }\n    })\n\n    if (\n      installPromptEvent &&\n      !window.matchMedia('(didsplay-mode: standalone)').matches\n    ) {\n      installPromptEvent.prompt().catch(console.error)\n    }\n  }, [installPromptEvent, history])\n\n  return (\n    <div className=\"Landing\">\n      <div className=\"content\">\n        <h1>こんにちは!</h1>\n        <p>\n          This is Kamatama Jisho, a Japanese-English phrase book powered by the\n          web!\n        </p>\n        {canInstall ? (\n          <p>To install Kamatama Jisho, just press the big egg down below.</p>\n        ) : (\n          <p>\n            Uh oh! The device you are using is not capable of installing{' '}\n            <a href=\"https://en.wikipedia.org/wiki/Progressive_web_application\">\n              PWAs\n            </a>\n            . Perhaps try a different device, or a different browser!\n          </p>\n        )}\n      </div>\n      {canInstall && (\n        <button className=\"icon\" onClick={handleInstall}>\n          <Icon />\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default Landing\n","import { openDB } from 'idb'\nimport { addDataIfNeeded } from './add-data'\n\nconst initDB = async () => {\n  const db = await openDB('kamatama', 1, {\n    upgrade: async (db, _, version) => {\n      console.log(`Upgrading database to version ${version}.`)\n\n      const allKanji = db.createObjectStore('allKanji', { keyPath: 'literal' })\n\n      const allPhrases = db.createObjectStore('allPhrases', {\n        keyPath: 'sequenceNumber'\n      })\n\n      const queryStore = db.createObjectStore('queryStore', {\n        keyPath: 'sequenceNumber'\n      })\n\n      queryStore.createIndex('queryStore', 'values', {\n        multiEntry: true\n      })\n\n      await Promise.all(\n        [allKanji, allPhrases, queryStore].map(\n          ({ transaction }) => transaction.done\n        )\n      ).catch(console.error)\n\n      console.log(`Database upgraded to version ${version}`)\n    }\n  })\n\n  if (process.env.NODE_ENV === 'development') {\n    addDataIfNeeded(db)\n  }\n\n  return db\n}\n\nexport default initDB\n","import { IDBPDatabase } from 'idb'\nimport { makeAutoObservable, runInAction } from 'mobx'\nimport initDB from '../dictionary'\nimport { JMEntry } from '../types/JMEntry'\n\n/**\n * Represents a store of the app's state.\n */\nexport class KamatamaJishoStore {\n  /** The current search query. */\n  query: string\n  loadingResults: boolean\n  results: JMEntry[]\n  request: number\n  dbPromise: Promise<IDBPDatabase>\n\n  constructor() {\n    makeAutoObservable(this)\n\n    this.query = ''\n    this.loadingResults = false\n    this.results = []\n    this.request = 0\n    this.dbPromise = initDB()\n  }\n\n  setQuery(updateFactory: string | ((priorQuery: string) => string)) {\n    if (updateFactory instanceof Function) {\n      this.query = updateFactory(this.query)\n    } else {\n      this.query = updateFactory\n    }\n    this.fetchResults()\n  }\n\n  private async fetchResults() {\n    if (this.query === '') {\n      runInAction(() => {\n        this.results = []\n      })\n      return\n    }\n\n    const requestID = ++this.request\n\n    const sequenceNumbers = await this.fetchSequenceNumbers()\n\n    const db = await this.dbPromise\n    const tx = db.transaction('allPhrases')\n\n    const results: JMEntry[] = []\n\n    await Promise.all(\n      Array.from(sequenceNumbers).map(async (number) => {\n        const entry = await tx.store.get(number)\n\n        results.push(entry)\n      })\n    )\n\n    if (requestID === this.request)\n      runInAction(() => {\n        this.results = results\n      })\n  }\n\n  private async fetchSequenceNumbers() {\n    const db = await this.dbPromise\n\n    const tx = db.transaction('queryStore')\n    const allSequenceNumbers = new Set<number>()\n\n    await tx.store\n      .index('queryStore')\n      .getAll(IDBKeyRange.bound(this.query, this.query + '\\uffff'), 50)\n      .then((results) => {\n        results.forEach((reading) => {\n          allSequenceNumbers.add(reading.sequenceNumber)\n        })\n      })\n\n    await tx.done\n\n    return allSequenceNumbers\n  }\n}\n\nconst store = new KamatamaJishoStore()\nexport default store\n","import { observer } from 'mobx-react-lite'\nimport { FC } from 'react'\nimport store from '../../state'\nimport { JMEntry } from '../../types/JMEntry'\nimport './Results.scss'\n\nconst ResultListItem: FC<JMEntry> = ({ reading, kanji, sense }) => {\n  return (\n    <li className=\"ResultListItem\">\n      <div className=\"forms\">\n        {[...kanji, ...reading]\n          .sort((a, b) => a.priority.length - b.priority.length)\n          .map((form) => form.value)\n          .join('、')}\n      </div>\n      <div className=\"meanings\">\n        {sense\n          .flatMap((meaning) => meaning.glossary)\n          .map((glossary) => glossary.value)\n          .join(', ')}\n      </div>\n    </li>\n  )\n}\n\n/**\n * A list of the results for the current query.\n */\nconst ResultList: FC<{\n  results: JMEntry[]\n}> = observer(() => {\n  const { results } = store\n\n  return (\n    <ul className=\"ResultList\">\n      {results.map((result) => (\n        <ResultListItem key={result.sequenceNumber} {...result} />\n      ))}\n    </ul>\n  )\n})\n\nexport default ResultList\n","export default __webpack_public_path__ + \"static/media/icon.b8f19d44.svg\";","import { ChangeEvent, FC, useCallback, useEffect, useRef } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport store from '../../state'\nimport icon from '../icon.svg'\nimport { Link } from 'react-router-dom'\nimport './SearchBar.scss'\n\nconst SearchBar: FC = observer(() => {\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    inputRef.current?.focus()\n  }, [])\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    store.setQuery(e.target.value)\n  }, [])\n\n  return (\n    <div className=\"SearchBar\">\n      <Link to=\"/install\">\n        <img className=\"icon\" src={icon} alt=\"icon\" />\n      </Link>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={store.query}\n        onChange={handleChange}\n        placeholder=\"Search here...\"\n      />\n      <button className=\"Radicals\">字</button>\n    </div>\n  )\n})\n\nexport default SearchBar\n","import { observer } from 'mobx-react-lite'\nimport { FC } from 'react'\nimport store from '../../state'\nimport ResultList from './Results'\nimport SearchBar from './SearchBar'\n\nconst Home: FC = observer(() => {\n  return (\n    <div className=\"Home\">\n      <SearchBar />\n      <ResultList results={store.results} />\n    </div>\n  )\n})\n\nexport default Home\n","import { FC, useEffect } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Landing from './components/Landing'\nimport Home from './components/Home'\n\nconst App: FC = () => {\n  useEffect(() => {}, [])\n\n  return (\n    <Router basename=\"/kamatama\">\n      <Switch>\n        <Route path=\"/install\">\n          <Landing />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './ui/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}