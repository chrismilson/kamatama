{"version":3,"sources":["dictionary/index.ts","dictionary/json-iterator.ts","dictionary/add-data.ts","webpack:///./src/ui/icon.svg?514c","ui/components/Landing.tsx","state/index.ts","ui/components/Results.tsx","ui/icon.svg","ui/components/SearchBar.tsx","ui/components/Phrase.tsx","ui/App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["initDB","a","openDB","upgrade","db","_","version","console","log","allKanji","createObjectStore","keyPath","allPhrases","queryStore","createIndex","multiEntry","Promise","all","map","transaction","done","catch","error","jsonIterator","url","decoder","TextDecoder","fetch","response","blob","gzBlob","arrayBuffer","gzBytes","jsonBytes","ungzip","Uint8Array","jsonBlob","Blob","reader","stream","getReader","open","inString","remaining","read","value","chunk","decode","lastBase","result","i","length","s","substring","push","JSON","parse","addKanjiToDB","kanjiGroup","tx","kanji","store","put","path","join","process","addPhrasesToDB","phraseGroup","phrase","query","sequenceNumber","exact","kana","partial","reading","hiragana","toHiragana","objectStore","addDataIfNeeded","promises","count","_extends","Object","assign","target","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","id","cx","cy","r","fill","stroke","strokeWidth","SvgIcon","_ref","svgRef","title","titleId","props","xmlns","viewBox","ref","ForwardRef","Landing","useState","installed","setInstalled","installing","setInstalling","canInstall","navigator","window","installPromptEvent","setInstallPromptEvent","useEffect","then","kanjiCount","phraseCount","handler","e","preventDefault","addEventListener","removeEventListener","handleInstall","useCallback","prompt","className","filter","Boolean","href","onClick","loadingResults","request","results","dbPromise","entry","currentEntry","makeAutoObservable","updateFactory","Function","fetchResults","passRomaji","runInAction","undefined","requestID","get","sequenceNumbers","Set","fetchExactSequenceNumbers","fetchPartialSequenceNumbers","Array","from","number","index","getAll","matches","forEach","add","IDBKeyRange","bound","ResultListItem","observer","sense","setCurrentEntry","sort","b","priority","form","flatMap","meaning","glossary","ResultList","SearchBar","inputRef","useRef","current","focus","handleChange","setQuery","src","icon","alt","type","onChange","placeholder","Phrase","prevEntry","display","stringify","App","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","location","hostname","match","windowLoad","resolve","wrap","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","origin","headers","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a7677bb0.chunk.js","sourcesContent":["import { openDB } from 'idb'\n\nconst initDB = async () => {\n  const db = await openDB('kamatama', 1, {\n    upgrade: async (db, _, version) => {\n      console.log(`Upgrading database to version ${version}.`)\n\n      const allKanji = db.createObjectStore('allKanji', { keyPath: 'literal' })\n\n      const allPhrases = db.createObjectStore('allPhrases', {\n        keyPath: 'sequenceNumber'\n      })\n\n      const queryStore = db.createObjectStore('queryStore', {\n        keyPath: 'sequenceNumber'\n      })\n\n      queryStore.createIndex('exact', 'exact', {\n        multiEntry: true\n      })\n      queryStore.createIndex('partial', 'partial', {\n        multiEntry: true\n      })\n\n      await Promise.all(\n        [allKanji, allPhrases, queryStore].map(\n          ({ transaction }) => transaction.done\n        )\n      ).catch(console.error)\n\n      console.log(`Database upgraded to version ${version}`)\n    }\n  })\n\n  return db\n}\n\nexport default initDB\n","import { ungzip } from 'pako'\n\n/**\n * Fetches a json file and iterates over all of the base objects.\n *\n * This parser is opinionated and makes assumptions about the data. Make sure\n * you understand how it works before you go ahead and copy/paste it into your\n * own project.\n *\n * @param url The url of the external json file\n */\nexport default async function* jsonIterator<T = any>(url: string) {\n  const decoder = new TextDecoder('utf-8')\n\n  const response = await fetch(url)\n  const gzBlob = await response.blob()\n  const gzBytes = await gzBlob.arrayBuffer()\n  const jsonBytes = ungzip(new Uint8Array(gzBytes))\n  const jsonBlob = new Blob([jsonBytes])\n  const reader = jsonBlob.stream().getReader()\n\n  if (!reader) {\n    return\n  }\n\n  // Counts the number of un-closed, open braces.\n  let open = 0\n\n  // A flag that reveals whether we are currently within a string.\n  let inString = false\n\n  // The start of a yet unclosed JSON object.\n  let remaining = ''\n\n  while (true) {\n    const { value, done } = await reader.read()\n    if (done) {\n      break\n    }\n    const chunk = value ? decoder.decode(value) : ''\n    let lastBase = -1\n    const result: T[] = []\n\n    for (let i = 0; i < chunk.length; i++) {\n      if (inString) {\n        if (chunk[i] === '\"') {\n          inString = false\n        } else if (chunk[i] === '\\\\') {\n          i += 1\n        }\n      } else if (chunk[i] === '\"') {\n        inString = true\n      } else if (chunk[i] === '{') {\n        if (open === 0) {\n          lastBase = i\n        }\n        open += 1\n      } else if (chunk[i] === '}') {\n        open -= 1\n        if (open === 0) {\n          if (lastBase < 0) {\n            const s = remaining + chunk.substring(0, i + 1)\n            try {\n              result.push(JSON.parse(remaining + chunk.substring(0, i + 1)))\n            } catch (e) {\n              console.log(s)\n              return\n            }\n          } else {\n            const s = chunk.substring(lastBase, i + 1)\n            try {\n              result.push(JSON.parse(chunk.substring(lastBase, i + 1)))\n            } catch (e) {\n              console.log(s)\n              return\n            }\n          }\n        }\n      }\n    }\n\n    yield result\n\n    if (open > 0) {\n      if (lastBase < 0) {\n        remaining += chunk\n      } else {\n        remaining = chunk.substring(lastBase)\n      }\n    }\n  }\n}\n","import { IDBPDatabase } from 'idb'\nimport path from 'path'\nimport { toHiragana } from 'wanakana'\nimport { JMEntry } from '../types/JMEntry'\nimport { KanjiCharacter } from '../types/Kanji'\nimport jsonIterator from './json-iterator'\n\nexport const addKanjiToDB = async (db: IDBPDatabase) => {\n  for await (const kanjiGroup of jsonIterator<KanjiCharacter>(\n    path.join(process.env.PUBLIC_URL, 'dict/kanjidic2.json.gz')\n  )) {\n    const tx = db.transaction('allKanji', 'readwrite')\n\n    await Promise.all(kanjiGroup.map((kanji) => tx.store.put(kanji)))\n\n    await tx.done\n  }\n}\n\nexport const addPhrasesToDB = async (db: IDBPDatabase) => {\n  for await (const phraseGroup of jsonIterator<JMEntry>(\n    path.join(process.env.PUBLIC_URL, 'dict/JMdict.json.gz')\n  )) {\n    const tx = db.transaction(['allPhrases', 'queryStore'], 'readwrite')\n\n    await Promise.all([\n      phraseGroup.map((phrase) => {\n        const query: {\n          sequenceNumber: number\n          exact: string[]\n          kana: string[]\n          partial: string[]\n        } = {\n          sequenceNumber: phrase.sequenceNumber,\n          exact: [],\n          kana: [],\n          partial: []\n        }\n\n        for (const { value } of [...phrase.kanji, ...phrase.reading]) {\n          const hiragana = toHiragana(value)\n\n          query.exact.push(hiragana)\n          for (let i = 1; i < hiragana.length; i++) {\n            query.partial.push(hiragana.substring(i))\n          }\n        }\n\n        return Promise.all([\n          tx.objectStore('allPhrases').put(phrase),\n          tx.objectStore('queryStore').put(query)\n        ])\n      })\n    ])\n\n    await tx.done\n  }\n}\n\nexport const addDataIfNeeded = async (db: IDBPDatabase) => {\n  const promises = []\n\n  if ((await db.count('allKanji')) < 13108) {\n    promises.push(addKanjiToDB(db))\n  }\n  if ((await db.count('allPhrases')) < 190269) {\n    promises.push(addPhrasesToDB(db))\n  }\n\n  await Promise.all(promises)\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"White\",\n  cx: 512,\n  cy: 512,\n  r: 507,\n  fill: \"#ffffff\",\n  stroke: \"#cccccc\",\n  strokeWidth: 10\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"Yolk\",\n  cx: 512,\n  cy: 512,\n  r: 200,\n  fill: \"#ffb43b\"\n}));\n\nfunction SvgIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 1024 1024\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgIcon);\nexport default __webpack_public_path__ + \"static/media/icon.b8f19d44.svg\";\nexport { ForwardRef as ReactComponent };","import { FC, useCallback, useEffect, useState } from 'react'\nimport initDB from '../../dictionary'\nimport { addDataIfNeeded } from '../../dictionary/add-data'\nimport { ReactComponent as Icon } from '../icon.svg'\nimport './Landing.scss'\n\nexport interface BeforeInstallPromptEvent extends Event {\n  prompt: () => Promise<void>\n}\n\nconst Landing: FC = () => {\n  const [installed, setInstalled] = useState(true)\n  const [installing, setInstalling] = useState(false)\n  // Can the UA install PWAs?\n  const canInstall = 'serviceWorker' in navigator && 'indexedDB' in window\n  const [\n    installPromptEvent,\n    setInstallPromptEvent\n  ] = useState<BeforeInstallPromptEvent | null>(null)\n\n  useEffect(() => {\n    if (canInstall) {\n      initDB().then(async (db) => {\n        const kanjiCount = await db.count('allKanji')\n        const phraseCount = await db.count('allPhrases')\n\n        if (kanjiCount < 13108 || phraseCount < 190269) {\n          setInstalled(false)\n        }\n      })\n    } else {\n      setInstalled(false)\n    }\n  }, [canInstall])\n\n  // If the user can be prompted to install the app, we want to do that.\n  useEffect(() => {\n    const handler = (e: Event) => {\n      e.preventDefault()\n\n      setInstallPromptEvent((e as unknown) as BeforeInstallPromptEvent)\n    }\n\n    window.addEventListener('beforeinstallprompt', handler)\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handler)\n    }\n  }, [])\n\n  // If the app should be installed, we should add the data to the db and prompt\n  // the user to install the standalone PWA.\n  const handleInstall = useCallback(() => {\n    if (installed || !canInstall || installing) {\n      return\n    }\n\n    setInstalling(true)\n    initDB()\n      .then((db) => addDataIfNeeded(db))\n      .then(() => {\n        if (installPromptEvent !== null) {\n          installPromptEvent.prompt()\n        }\n        setInstalled(true)\n      })\n  }, [installPromptEvent, installed, canInstall, installing])\n\n  return (\n    <div\n      className={['Landing', installed && 'installed']\n        .filter(Boolean) // removes falsy classnames\n        .join(' ')}\n    >\n      <div className=\"content\">\n        <h1>こんにちは!</h1>\n        <p>\n          This is Kamatama Jisho, a Japanese-English phrase book powered by the\n          web!\n        </p>\n        {canInstall ? (\n          <p>To install Kamatama Jisho, just press the big egg down below.</p>\n        ) : (\n          <p>\n            Uh oh! The device you are using is not capable of installing{' '}\n            <a href=\"https://en.wikipedia.org/wiki/Progressive_web_application\">\n              PWAs\n            </a>\n            . Perhaps try a different device, or a different browser!\n          </p>\n        )}\n      </div>\n      {canInstall && (\n        <button className=\"icon\">\n          <Icon onClick={handleInstall} />\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default Landing\n","import { IDBPDatabase } from 'idb'\nimport { makeAutoObservable, runInAction } from 'mobx'\nimport { toHiragana } from 'wanakana'\nimport initDB from '../dictionary'\nimport { JMEntry } from '../types/JMEntry'\n\n/**\n * Represents a store of the app's state.\n */\nexport class KamatamaJishoStore {\n  /** The current search query. */\n  query: string\n  loadingResults: boolean\n  /**\n   * A counter to increment on result fetching.\n   *\n   * If the results come back and the counter has been increased, we should\n   * abandon the results.\n   */\n  request: number\n  results: JMEntry[]\n  dbPromise: Promise<IDBPDatabase>\n\n  /**\n   * A counter to increment on entry fetching.\n   *\n   * If the entry comes back and the counter has been increased, we should\n   * abandon the result.\n   */\n  entry: number\n  /**\n   * The currently selected entry.\n   */\n  currentEntry?: JMEntry\n\n  constructor() {\n    makeAutoObservable(this)\n\n    this.query = ''\n    this.loadingResults = false\n    this.results = []\n    this.request = 0\n    this.entry = 0\n    this.dbPromise = initDB()\n  }\n\n  setQuery(updateFactory: string | ((priorQuery: string) => string)) {\n    if (updateFactory instanceof Function) {\n      this.query = updateFactory(this.query)\n    } else {\n      this.query = updateFactory\n    }\n    this.fetchResults(toHiragana(this.query, { passRomaji: true }))\n  }\n\n  async setCurrentEntry(sequenceNumber: number) {\n    if (sequenceNumber === -1) {\n      runInAction(() => {\n        this.currentEntry = undefined\n      })\n      return\n    }\n    const requestID = ++this.entry\n    const db = await this.dbPromise\n\n    const tx = db.transaction('allPhrases')\n\n    const result = await tx.store.get(sequenceNumber)\n\n    if (this.entry === requestID) {\n      runInAction(() => {\n        this.currentEntry = result\n      })\n    }\n  }\n\n  private async fetchResults(query: string) {\n    if (query === '') {\n      runInAction(() => {\n        this.results = []\n      })\n      return\n    }\n    const requestID = ++this.request\n\n    const sequenceNumbers = new Set<number>()\n\n    await this.fetchExactSequenceNumbers(query, sequenceNumbers)\n    await this.fetchPartialSequenceNumbers(query, sequenceNumbers)\n\n    const db = await this.dbPromise\n    const tx = db.transaction('allPhrases')\n\n    const results: JMEntry[] = []\n\n    await Promise.all(\n      Array.from(sequenceNumbers).map(async (number) => {\n        const entry = await tx.store.get(number)\n\n        results.push(entry)\n      })\n    )\n\n    if (requestID === this.request) {\n      runInAction(() => {\n        this.results = results\n      })\n    }\n  }\n\n  private async fetchExactSequenceNumbers(\n    query: string,\n    sequenceNumbers: Set<number>\n  ) {\n    const db = await this.dbPromise\n\n    const tx = db.transaction('queryStore')\n\n    await tx.store\n      .index('exact')\n      .getAll(query)\n      .then((matches) => {\n        matches.forEach(({ sequenceNumber }) => {\n          sequenceNumbers.add(sequenceNumber)\n        })\n      })\n\n    await tx.done\n  }\n\n  private async fetchPartialSequenceNumbers(\n    query: string,\n    sequenceNumbers: Set<number>\n  ) {\n    const db = await this.dbPromise\n\n    const tx = db.transaction('queryStore')\n\n    await Promise.all([\n      tx.store\n        .index('exact')\n        .getAll(IDBKeyRange.bound(query, query + '\\uffff'), 30)\n        .then((matches) => {\n          matches.forEach(({ sequenceNumber }) => {\n            sequenceNumbers.add(sequenceNumber)\n          })\n        }),\n      tx.store\n        .index('partial')\n        .getAll(IDBKeyRange.bound(query, query + '\\uffff'), 30)\n        .then((matches) => {\n          matches.forEach(({ sequenceNumber }) => {\n            sequenceNumbers.add(sequenceNumber)\n          })\n        })\n    ])\n\n    await tx.done\n  }\n}\n\nconst store = new KamatamaJishoStore()\nexport default store\n","import { observer } from 'mobx-react-lite'\nimport { FC } from 'react'\nimport store from '../../state'\nimport { JMEntry } from '../../types/JMEntry'\nimport './Results.scss'\n\nconst ResultListItem: FC<JMEntry> = observer(\n  ({ sequenceNumber, reading, kanji, sense }) => {\n    return (\n      <li\n        className=\"ResultListItem\"\n        onClick={() => {\n          store.setCurrentEntry(sequenceNumber)\n          console.log(reading[0].value)\n        }}\n      >\n        <div className=\"forms\">\n          {[...kanji, ...reading]\n            .sort((a, b) => a.priority.length - b.priority.length)\n            .map((form) => form.value)\n            .join('、')}\n        </div>\n        <div className=\"meanings\">\n          {sense\n            .flatMap((meaning) => meaning.glossary)\n            .map((glossary) => glossary.value)\n            .join(', ')}\n        </div>\n      </li>\n    )\n  }\n)\n\n/**\n * A list of the results for the current query.\n */\nconst ResultList: FC<{\n  results: JMEntry[]\n}> = observer(() => {\n  const { results } = store\n\n  return (\n    <ul className=\"ResultList\">\n      {results.map((result) => (\n        <ResultListItem key={result.sequenceNumber} {...result} />\n      ))}\n    </ul>\n  )\n})\n\nexport default ResultList\n","export default __webpack_public_path__ + \"static/media/icon.b8f19d44.svg\";","import { ChangeEvent, FC, useCallback, useEffect, useRef } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport store from '../../state'\nimport icon from '../icon.svg'\nimport './SearchBar.scss'\n\nconst SearchBar: FC = observer(() => {\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    inputRef.current?.focus()\n  }, [])\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    store.setQuery(e.target.value)\n  }, [])\n\n  return (\n    <div className=\"SearchBar\">\n      <img className=\"icon\" src={icon} alt=\"icon\" />\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={store.query}\n        onChange={handleChange}\n        placeholder=\"Search here...\"\n      />\n      <button className=\"Radicals\">字</button>\n    </div>\n  )\n})\n\nexport default SearchBar\n","import { observer } from 'mobx-react-lite'\nimport { FC, useEffect, useRef } from 'react'\nimport store from '../../state'\nimport { JMEntry } from '../../types/JMEntry'\nimport './Phrase.scss'\n\nconst Phrase: FC = observer(() => {\n  const entry = store.currentEntry\n  const prevEntry = useRef<JMEntry>()\n\n  useEffect(() => {\n    prevEntry.current = entry\n  }, [entry])\n\n  const display = entry || prevEntry.current\n\n  return (\n    <div className={['Phrase', entry && 'valid'].filter(Boolean).join(' ')}>\n      <button onClick={() => store.setCurrentEntry(-1)}>close</button>\n      <pre>{JSON.stringify(display, null, 2)}</pre>\n    </div>\n  )\n})\n\nexport default Phrase\n","import { FC } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport Landing from './components/Landing'\nimport store from '../state'\nimport ResultList from './components/Results'\nimport SearchBar from './components/SearchBar'\nimport './App.scss'\nimport Phrase from './components/Phrase'\n\nconst App: FC = observer(() => {\n  return (\n    <div className=\"App\">\n      <Landing />\n      <Phrase />\n      <SearchBar />\n      <ResultList results={store.results} />\n    </div>\n  )\n})\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nconst windowLoad = new Promise<void>((resolve) => {\n  const wrap = () => {\n    resolve()\n    window.removeEventListener('load', wrap)\n  }\n  window.addEventListener('load', wrap)\n})\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    windowLoad.then(() => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './ui/App'\nimport reportWebVitals from './reportWebVitals'\nimport { register } from './serviceWorkerRegistration'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\nregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}