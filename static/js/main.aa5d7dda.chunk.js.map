{"version":3,"sources":["dictionary/json-iterator.ts","dictionary/add-data.ts","dictionary/index.ts","serviceWorkerRegistration.ts","webpack:///./src/ui/icon.svg?514c","ui/components/Landing.tsx","state/index.ts","ui/components/Results.tsx","ui/icon.svg","ui/components/SearchBar.tsx","ui/components/Phrase.tsx","ui/App.tsx","reportWebVitals.ts","index.tsx"],"names":["jsonIterator","url","a","decoder","TextDecoder","fetch","response","blob","gzBlob","arrayBuffer","gzBytes","jsonBytes","ungzip","Uint8Array","jsonBlob","Blob","reader","stream","getReader","open","inString","remaining","read","value","done","chunk","decode","lastBase","result","i","length","s","substring","push","JSON","parse","console","log","addKanjiToDB","db","kanjiGroup","tx","transaction","Promise","all","map","kanji","store","put","path","join","process","addPhrasesToDB","phraseGroup","phrase","query","sequenceNumber","exact","kana","partial","reading","hiragana","toHiragana","objectStore","addDataIfNeeded","promises","count","initDB","openDB","upgrade","_","version","allKanji","createObjectStore","keyPath","allPhrases","queryStore","createIndex","multiEntry","catch","error","isLocalhost","Boolean","window","location","hostname","match","windowLoad","resolve","addEventListener","wrap","removeEventListener","register","config","navigator","URL","href","origin","then","swUrl","headers","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","_extends","Object","assign","target","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","id","cx","cy","r","fill","stroke","strokeWidth","SvgIcon","_ref","svgRef","title","titleId","props","xmlns","viewBox","ref","ForwardRef","Landing","useState","installed","setInstalled","canInstall","installPromptEvent","setInstallPromptEvent","useEffect","kanjiCount","phraseCount","handler","e","preventDefault","handleInstall","useCallback","matchMedia","matches","prompt","className","filter","onClick","loadingResults","request","results","dbPromise","entry","currentEntry","makeAutoObservable","updateFactory","Function","fetchResults","passRomaji","runInAction","undefined","requestID","sequenceNumbers","Set","fetchExactSequenceNumbers","fetchPartialSequenceNumbers","Array","from","number","index","getAll","forEach","add","IDBKeyRange","bound","ResultListItem","observer","sense","setCurrentEntry","sort","b","priority","form","flatMap","meaning","glossary","ResultList","SearchBar","inputRef","useRef","current","focus","handleChange","setQuery","src","icon","alt","type","onChange","placeholder","Phrase","prevEntry","display","stringify","App","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa5d7dda.chunk.js","sourcesContent":["import { ungzip } from 'pako'\n\n/**\n * Fetches a json file and iterates over all of the base objects.\n *\n * This parser is opinionated and makes assumptions about the data. Make sure\n * you understand how it works before you go ahead and copy/paste it into your\n * own project.\n *\n * @param url The url of the external json file\n */\nexport default async function* jsonIterator<T = any>(url: string) {\n  const decoder = new TextDecoder('utf-8')\n\n  const response = await fetch(url)\n  const gzBlob = await response.blob()\n  const gzBytes = await gzBlob.arrayBuffer()\n  const jsonBytes = ungzip(new Uint8Array(gzBytes))\n  const jsonBlob = new Blob([jsonBytes])\n  const reader = jsonBlob.stream().getReader()\n\n  if (!reader) {\n    return\n  }\n\n  // Counts the number of un-closed, open braces.\n  let open = 0\n\n  // A flag that reveals whether we are currently within a string.\n  let inString = false\n\n  // The start of a yet unclosed JSON object.\n  let remaining = ''\n\n  while (true) {\n    const { value, done } = await reader.read()\n    if (done) {\n      break\n    }\n    const chunk = value ? decoder.decode(value) : ''\n    let lastBase = -1\n    const result: T[] = []\n\n    for (let i = 0; i < chunk.length; i++) {\n      if (inString) {\n        if (chunk[i] === '\"') {\n          inString = false\n        } else if (chunk[i] === '\\\\') {\n          i += 1\n        }\n      } else if (chunk[i] === '\"') {\n        inString = true\n      } else if (chunk[i] === '{') {\n        if (open === 0) {\n          lastBase = i\n        }\n        open += 1\n      } else if (chunk[i] === '}') {\n        open -= 1\n        if (open === 0) {\n          if (lastBase < 0) {\n            const s = remaining + chunk.substring(0, i + 1)\n            try {\n              result.push(JSON.parse(remaining + chunk.substring(0, i + 1)))\n            } catch (e) {\n              console.log(s)\n              return\n            }\n          } else {\n            const s = chunk.substring(lastBase, i + 1)\n            try {\n              result.push(JSON.parse(chunk.substring(lastBase, i + 1)))\n            } catch (e) {\n              console.log(s)\n              return\n            }\n          }\n        }\n      }\n    }\n\n    yield result\n\n    if (open > 0) {\n      if (lastBase < 0) {\n        remaining += chunk\n      } else {\n        remaining = chunk.substring(lastBase)\n      }\n    }\n  }\n}\n","import { IDBPDatabase } from 'idb'\nimport path from 'path'\nimport { toHiragana } from 'wanakana'\nimport { JMEntry } from '../types/JMEntry'\nimport { KanjiCharacter } from '../types/Kanji'\nimport jsonIterator from './json-iterator'\n\nexport const addKanjiToDB = async (db: IDBPDatabase) => {\n  for await (const kanjiGroup of jsonIterator<KanjiCharacter>(\n    path.join(process.env.PUBLIC_URL, 'dict/kanjidic2.json.gz')\n  )) {\n    const tx = db.transaction('allKanji', 'readwrite')\n\n    await Promise.all(kanjiGroup.map((kanji) => tx.store.put(kanji)))\n\n    await tx.done\n  }\n}\n\nexport const addPhrasesToDB = async (db: IDBPDatabase) => {\n  for await (const phraseGroup of jsonIterator<JMEntry>(\n    path.join(process.env.PUBLIC_URL, 'dict/JMdict.json.gz')\n  )) {\n    const tx = db.transaction(['allPhrases', 'queryStore'], 'readwrite')\n\n    await Promise.all([\n      phraseGroup.map((phrase) => {\n        const query: {\n          sequenceNumber: number\n          exact: string[]\n          kana: string[]\n          partial: string[]\n        } = {\n          sequenceNumber: phrase.sequenceNumber,\n          exact: [],\n          kana: [],\n          partial: []\n        }\n\n        for (const { value } of [...phrase.kanji, ...phrase.reading]) {\n          const hiragana = toHiragana(value)\n\n          query.exact.push(hiragana)\n          for (let i = 1; i < hiragana.length; i++) {\n            query.partial.push(hiragana.substring(i))\n          }\n        }\n\n        return Promise.all([\n          tx.objectStore('allPhrases').put(phrase),\n          tx.objectStore('queryStore').put(query)\n        ])\n      })\n    ])\n\n    await tx.done\n  }\n}\n\nexport const addDataIfNeeded = async (db: IDBPDatabase) => {\n  const promises = []\n\n  if ((await db.count('allKanji')) < 13108) {\n    promises.push(addKanjiToDB(db))\n  }\n  if ((await db.count('allPhrases')) < 190269) {\n    promises.push(addPhrasesToDB(db))\n  }\n\n  await Promise.all(promises)\n}\n","import { openDB } from 'idb'\nimport { addDataIfNeeded } from './add-data'\n\nconst initDB = async () => {\n  const db = await openDB('kamatama', 1, {\n    upgrade: async (db, _, version) => {\n      console.log(`Upgrading database to version ${version}.`)\n\n      const allKanji = db.createObjectStore('allKanji', { keyPath: 'literal' })\n\n      const allPhrases = db.createObjectStore('allPhrases', {\n        keyPath: 'sequenceNumber'\n      })\n\n      const queryStore = db.createObjectStore('queryStore', {\n        keyPath: 'sequenceNumber'\n      })\n\n      queryStore.createIndex('exact', 'exact', {\n        multiEntry: true\n      })\n      queryStore.createIndex('partial', 'partial', {\n        multiEntry: true\n      })\n\n      await Promise.all(\n        [allKanji, allPhrases, queryStore].map(\n          ({ transaction }) => transaction.done\n        )\n      ).catch(console.error)\n\n      console.log(`Database upgraded to version ${version}`)\n    }\n  })\n\n  await addDataIfNeeded(db)\n\n  return db\n}\n\nexport default initDB\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nconst windowLoad = new Promise<void>((resolve) => {\n  const wrap = () => {\n    resolve()\n    window.removeEventListener('load', wrap)\n  }\n  window.addEventListener('load', wrap)\n})\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    windowLoad.then(() => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"White\",\n  cx: 512,\n  cy: 512,\n  r: 507,\n  fill: \"#ffffff\",\n  stroke: \"#cccccc\",\n  strokeWidth: 10\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"Yolk\",\n  cx: 512,\n  cy: 512,\n  r: 200,\n  fill: \"#ffb43b\"\n}));\n\nfunction SvgIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 1024 1024\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgIcon);\nexport default __webpack_public_path__ + \"static/media/icon.b8f19d44.svg\";\nexport { ForwardRef as ReactComponent };","import { FC, useCallback, useEffect, useState } from 'react'\nimport initDB from '../../dictionary'\nimport { addDataIfNeeded } from '../../dictionary/add-data'\nimport { register } from '../../serviceWorkerRegistration'\nimport { ReactComponent as Icon } from '../icon.svg'\nimport './Landing.scss'\n\nexport interface BeforeInstallPromptEvent extends Event {\n  prompt: () => Promise<void>\n}\n\nconst Landing: FC = () => {\n  const [installed, setInstalled] = useState(true)\n  // Can the UA install PWAs?\n  const canInstall = 'serviceWorker' in navigator\n  const [\n    installPromptEvent,\n    setInstallPromptEvent\n  ] = useState<BeforeInstallPromptEvent | null>(null)\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      initDB().then(async (db) => {\n        const kanjiCount = await db.count('allKanji')\n        const phraseCount = await db.count('allPhrases')\n\n        if (kanjiCount < 13108 || phraseCount < 190269) {\n          setInstalled(false)\n        }\n      })\n      return\n    }\n\n    // Is the app installed?\n    if (canInstall) {\n      if (navigator.serviceWorker.controller === null) {\n        // the app is not installed\n        setInstalled(false)\n      } else {\n        initDB().then(async (db) => {\n          const kanjiCount = await db.count('allKanji')\n          const phraseCount = await db.count('allPhrases')\n\n          if (kanjiCount < 13108 || phraseCount < 190269) {\n            setInstalled(false)\n          }\n        })\n      }\n    } else {\n      setInstalled(false)\n    }\n  }, [canInstall])\n\n  useEffect(() => {\n    const handler = (e: Event) => {\n      e.preventDefault()\n\n      setInstallPromptEvent((e as unknown) as BeforeInstallPromptEvent)\n    }\n\n    window.addEventListener('beforeinstallprompt', handler)\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handler)\n    }\n  }, [])\n\n  const handleInstall = useCallback(() => {\n    const onSuccess = () => {\n      // The service worker is now installed.\n      setInstalled(true)\n    }\n\n    if (process.env.NODE_ENV === 'development') {\n      initDB()\n        .then((db) => addDataIfNeeded(db))\n        .then(() => setInstalled(true))\n      return\n    }\n\n    register({ onSuccess })\n\n    if (\n      installPromptEvent &&\n      !window.matchMedia('(display-mode: standalone)').matches\n    ) {\n      installPromptEvent.prompt().catch(console.error)\n    }\n  }, [installPromptEvent])\n\n  return (\n    <div\n      className={['Landing', installed && 'installed']\n        .filter(Boolean)\n        .join(' ')}\n    >\n      <div className=\"content\">\n        <h1>こんにちは!</h1>\n        <p>\n          This is Kamatama Jisho, a Japanese-English phrase book powered by the\n          web!\n        </p>\n        {canInstall ? (\n          <p>To install Kamatama Jisho, just press the big egg down below.</p>\n        ) : (\n          <p>\n            Uh oh! The device you are using is not capable of installing{' '}\n            <a href=\"https://en.wikipedia.org/wiki/Progressive_web_application\">\n              PWAs\n            </a>\n            . Perhaps try a different device, or a different browser!\n          </p>\n        )}\n      </div>\n      {canInstall && (\n        <button className=\"icon\" onClick={handleInstall}>\n          <Icon />\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default Landing\n","import { IDBPDatabase } from 'idb'\nimport { makeAutoObservable, runInAction } from 'mobx'\nimport { toHiragana } from 'wanakana'\nimport initDB from '../dictionary'\nimport { JMEntry } from '../types/JMEntry'\n\n/**\n * Represents a store of the app's state.\n */\nexport class KamatamaJishoStore {\n  /** The current search query. */\n  query: string\n  loadingResults: boolean\n  /**\n   * A counter to increment on result fetching.\n   *\n   * If the results come back and the counter has been increased, we should\n   * abandon the results.\n   */\n  request: number\n  results: JMEntry[]\n  dbPromise: Promise<IDBPDatabase>\n\n  /**\n   * A counter to increment on entry fetching.\n   *\n   * If the entry comes back and the counter has been increased, we should\n   * abandon the result.\n   */\n  entry: number\n  /**\n   * The currently selected entry.\n   */\n  currentEntry?: JMEntry\n\n  constructor() {\n    makeAutoObservable(this)\n\n    this.query = ''\n    this.loadingResults = false\n    this.results = []\n    this.request = 0\n    this.entry = 0\n    this.dbPromise = initDB()\n  }\n\n  setQuery(updateFactory: string | ((priorQuery: string) => string)) {\n    if (updateFactory instanceof Function) {\n      this.query = updateFactory(this.query)\n    } else {\n      this.query = updateFactory\n    }\n    this.fetchResults(toHiragana(this.query, { passRomaji: true }))\n  }\n\n  async setCurrentEntry(sequenceNumber: number) {\n    if (sequenceNumber === -1) {\n      runInAction(() => {\n        this.currentEntry = undefined\n      })\n      return\n    }\n    const requestID = ++this.entry\n    const db = await this.dbPromise\n\n    const tx = db.transaction('allPhrases')\n\n    const result = await tx.store.get(sequenceNumber)\n\n    if (this.entry === requestID) {\n      runInAction(() => {\n        this.currentEntry = result\n      })\n    }\n  }\n\n  private async fetchResults(query: string) {\n    if (query === '') {\n      runInAction(() => {\n        this.results = []\n      })\n      return\n    }\n    const requestID = ++this.request\n\n    const sequenceNumbers = new Set<number>()\n\n    await this.fetchExactSequenceNumbers(query, sequenceNumbers)\n    await this.fetchPartialSequenceNumbers(query, sequenceNumbers)\n\n    const db = await this.dbPromise\n    const tx = db.transaction('allPhrases')\n\n    const results: JMEntry[] = []\n\n    await Promise.all(\n      Array.from(sequenceNumbers).map(async (number) => {\n        const entry = await tx.store.get(number)\n\n        results.push(entry)\n      })\n    )\n\n    if (requestID === this.request) {\n      runInAction(() => {\n        this.results = results\n      })\n    }\n  }\n\n  private async fetchExactSequenceNumbers(\n    query: string,\n    sequenceNumbers: Set<number>\n  ) {\n    const db = await this.dbPromise\n\n    const tx = db.transaction('queryStore')\n\n    await tx.store\n      .index('exact')\n      .getAll(query)\n      .then((matches) => {\n        matches.forEach(({ sequenceNumber }) => {\n          sequenceNumbers.add(sequenceNumber)\n        })\n      })\n\n    await tx.done\n  }\n\n  private async fetchPartialSequenceNumbers(\n    query: string,\n    sequenceNumbers: Set<number>\n  ) {\n    const db = await this.dbPromise\n\n    const tx = db.transaction('queryStore')\n\n    await Promise.all([\n      tx.store\n        .index('exact')\n        .getAll(IDBKeyRange.bound(query, query + '\\uffff'), 30)\n        .then((matches) => {\n          matches.forEach(({ sequenceNumber }) => {\n            sequenceNumbers.add(sequenceNumber)\n          })\n        }),\n      tx.store\n        .index('partial')\n        .getAll(IDBKeyRange.bound(query, query + '\\uffff'), 30)\n        .then((matches) => {\n          matches.forEach(({ sequenceNumber }) => {\n            sequenceNumbers.add(sequenceNumber)\n          })\n        })\n    ])\n\n    await tx.done\n  }\n}\n\nconst store = new KamatamaJishoStore()\nexport default store\n","import { observer } from 'mobx-react-lite'\nimport { FC } from 'react'\nimport store from '../../state'\nimport { JMEntry } from '../../types/JMEntry'\nimport './Results.scss'\n\nconst ResultListItem: FC<JMEntry> = observer(\n  ({ sequenceNumber, reading, kanji, sense }) => {\n    return (\n      <li\n        className=\"ResultListItem\"\n        onClick={() => {\n          store.setCurrentEntry(sequenceNumber)\n          console.log(reading[0].value)\n        }}\n      >\n        <div className=\"forms\">\n          {[...kanji, ...reading]\n            .sort((a, b) => a.priority.length - b.priority.length)\n            .map((form) => form.value)\n            .join('、')}\n        </div>\n        <div className=\"meanings\">\n          {sense\n            .flatMap((meaning) => meaning.glossary)\n            .map((glossary) => glossary.value)\n            .join(', ')}\n        </div>\n      </li>\n    )\n  }\n)\n\n/**\n * A list of the results for the current query.\n */\nconst ResultList: FC<{\n  results: JMEntry[]\n}> = observer(() => {\n  const { results } = store\n\n  return (\n    <ul className=\"ResultList\">\n      {results.map((result) => (\n        <ResultListItem key={result.sequenceNumber} {...result} />\n      ))}\n    </ul>\n  )\n})\n\nexport default ResultList\n","export default __webpack_public_path__ + \"static/media/icon.b8f19d44.svg\";","import { ChangeEvent, FC, useCallback, useEffect, useRef } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport store from '../../state'\nimport icon from '../icon.svg'\nimport './SearchBar.scss'\n\nconst SearchBar: FC = observer(() => {\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    inputRef.current?.focus()\n  }, [])\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    store.setQuery(e.target.value)\n  }, [])\n\n  return (\n    <div className=\"SearchBar\">\n      <img className=\"icon\" src={icon} alt=\"icon\" />\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={store.query}\n        onChange={handleChange}\n        placeholder=\"Search here...\"\n      />\n      <button className=\"Radicals\">字</button>\n    </div>\n  )\n})\n\nexport default SearchBar\n","import { observer } from 'mobx-react-lite'\nimport { FC, useEffect, useRef } from 'react'\nimport store from '../../state'\nimport { JMEntry } from '../../types/JMEntry'\nimport './Phrase.scss'\n\nconst Phrase: FC = observer(() => {\n  const entry = store.currentEntry\n  const prevEntry = useRef<JMEntry>()\n\n  useEffect(() => {\n    prevEntry.current = entry\n  }, [entry])\n\n  const display = entry || prevEntry.current\n\n  return (\n    <div className={['Phrase', entry && 'valid'].filter(Boolean).join(' ')}>\n      <button onClick={() => store.setCurrentEntry(-1)}>close</button>\n      <pre>{JSON.stringify(display, null, 2)}</pre>\n    </div>\n  )\n})\n\nexport default Phrase\n","import { FC } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport Landing from './components/Landing'\nimport store from '../state'\nimport ResultList from './components/Results'\nimport SearchBar from './components/SearchBar'\nimport './App.scss'\nimport Phrase from './components/Phrase'\n\nconst App: FC = observer(() => {\n  return (\n    <div className=\"App\">\n      <Landing />\n      <Phrase />\n      <SearchBar />\n      <ResultList results={store.results} />\n    </div>\n  )\n})\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './ui/App'\nimport reportWebVitals from './reportWebVitals'\nimport { register } from './serviceWorkerRegistration'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\nregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}