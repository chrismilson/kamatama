{"version":3,"sources":["dictionary/index.ts","state/index.ts","ui/components/Results.tsx","ui/icon.svg","ui/components/SearchBar.tsx","ui/App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["initDB","a","openDB","upgrade","db","_","version","console","log","allKanji","createObjectStore","keyPath","allPhrases","queryStore","createIndex","multiEntry","Promise","all","map","transaction","done","catch","error","store","query","loadingResults","results","request","dbPromise","makeAutoObservable","this","updateFactory","Function","fetchResults","runInAction","requestID","fetchSequenceNumbers","sequenceNumbers","tx","Array","from","number","get","entry","push","allSequenceNumbers","Set","index","getAll","IDBKeyRange","bound","then","forEach","reading","add","sequenceNumber","ResultListItem","kanji","sense","className","sort","b","priority","length","form","value","join","flatMap","meaning","glossary","ResultList","observer","result","SearchBar","inputRef","useRef","useEffect","current","focus","handleChange","useCallback","e","setQuery","target","src","icon","alt","ref","type","onChange","placeholder","App","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.59f33c96.chunk.js","sourcesContent":["import { openDB } from 'idb'\n\nconst initDB = async () => {\n  const db = await openDB('kamatama', 1, {\n    upgrade: async (db, _, version) => {\n      console.log(`Upgrading database to version ${version}.`)\n\n      const allKanji = db.createObjectStore('allKanji', { keyPath: 'literal' })\n\n      const allPhrases = db.createObjectStore('allPhrases', {\n        keyPath: 'sequenceNumber'\n      })\n\n      const queryStore = db.createObjectStore('queryStore', {\n        keyPath: 'sequenceNumber'\n      })\n\n      queryStore.createIndex('queryStore', 'values', {\n        multiEntry: true\n      })\n\n      await Promise.all(\n        [allKanji, allPhrases, queryStore].map(\n          ({ transaction }) => transaction.done\n        )\n      ).catch(console.error)\n\n      console.log(`Database upgraded to version ${version}`)\n    }\n  })\n\n  return db\n}\n\nexport default initDB\n","import { IDBPDatabase } from 'idb'\nimport { makeAutoObservable, runInAction } from 'mobx'\nimport initDB from '../dictionary'\nimport { JMEntry } from '../types/JMEntry'\n\n/**\n * Represents a store of the app's state.\n */\nexport class KamatamaJishoStore {\n  /** The current search query. */\n  query: string\n  loadingResults: boolean\n  results: JMEntry[]\n  request: number\n  dbPromise: Promise<IDBPDatabase>\n\n  constructor() {\n    makeAutoObservable(this)\n\n    this.query = ''\n    this.loadingResults = false\n    this.results = []\n    this.request = 0\n    this.dbPromise = initDB()\n  }\n\n  setQuery(updateFactory: string | ((priorQuery: string) => string)) {\n    if (updateFactory instanceof Function) {\n      this.query = updateFactory(this.query)\n    } else {\n      this.query = updateFactory\n    }\n    this.fetchResults()\n  }\n\n  private async fetchResults() {\n    if (this.query === '') {\n      runInAction(() => {\n        this.results = []\n      })\n      return\n    }\n\n    const requestID = ++this.request\n\n    const sequenceNumbers = await this.fetchSequenceNumbers()\n\n    const db = await this.dbPromise\n    const tx = db.transaction('allPhrases')\n\n    const results: JMEntry[] = []\n\n    await Promise.all(\n      Array.from(sequenceNumbers).map(async (number) => {\n        const entry = await tx.store.get(number)\n\n        results.push(entry)\n      })\n    )\n\n    if (requestID === this.request)\n      runInAction(() => {\n        this.results = results\n      })\n  }\n\n  private async fetchSequenceNumbers() {\n    const db = await this.dbPromise\n\n    const tx = db.transaction('queryStore')\n    const allSequenceNumbers = new Set<number>()\n\n    await tx.store\n      .index('queryStore')\n      .getAll(IDBKeyRange.bound(this.query, this.query + '\\uffff'), 50)\n      .then((results) => {\n        results.forEach((reading) => {\n          allSequenceNumbers.add(reading.sequenceNumber)\n        })\n      })\n\n    await tx.done\n\n    return allSequenceNumbers\n  }\n}\n\nconst store = new KamatamaJishoStore()\nexport default store\n","import { observer } from 'mobx-react-lite'\nimport { FC } from 'react'\nimport store from '../../state'\nimport { JMEntry } from '../../types/JMEntry'\nimport './Results.scss'\n\nconst ResultListItem: FC<JMEntry> = ({ reading, kanji, sense }) => {\n  return (\n    <li className=\"ResultListItem\">\n      <div className=\"forms\">\n        {[...kanji, ...reading]\n          .sort((a, b) => a.priority.length - b.priority.length)\n          .map((form) => form.value)\n          .join('„ÄÅ')}\n      </div>\n      <div className=\"meanings\">\n        {sense\n          .flatMap((meaning) => meaning.glossary)\n          .map((glossary) => glossary.value)\n          .join(', ')}\n      </div>\n    </li>\n  )\n}\n\n/**\n * A list of the results for the current query.\n */\nconst ResultList: FC<{\n  results: JMEntry[]\n}> = observer(() => {\n  const { results } = store\n\n  return (\n    <ul className=\"ResultList\">\n      {results.map((result) => (\n        <ResultListItem key={result.sequenceNumber} {...result} />\n      ))}\n    </ul>\n  )\n})\n\nexport default ResultList\n","export default __webpack_public_path__ + \"static/media/icon.1efb8337.svg\";","import { ChangeEvent, FC, useCallback, useEffect, useRef } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport store from '../../state'\nimport icon from '../icon.svg'\nimport './SearchBar.scss'\n\nconst SearchBar: FC = observer(() => {\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    inputRef.current?.focus()\n  }, [])\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    store.setQuery(e.target.value)\n  }, [])\n\n  return (\n    <div className=\"SearchBar\">\n      <img className=\"icon\" src={icon} alt=\"icon to open menu\" />\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={store.query}\n        onChange={handleChange}\n        placeholder=\"Search here...\"\n      />\n      <button className=\"Radicals\">Â≠ó</button>\n    </div>\n  )\n})\n\nexport default SearchBar\n","import { FC } from 'react'\nimport ResultList from './components/Results'\nimport store from '../state'\nimport './App.css'\nimport { observer } from 'mobx-react-lite'\nimport SearchBar from './components/SearchBar'\n\nconst App: FC = observer(() => {\n  return (\n    <div className=\"App\">\n      <SearchBar />\n      <ResultList results={store.results} />\n    </div>\n  )\n})\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './ui/App'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorkerRegistration'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}