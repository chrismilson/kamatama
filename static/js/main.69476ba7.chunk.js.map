{"version":3,"sources":["dictionary/index.ts","dictionary/json-iterator.ts","dictionary/add-data.ts","webpack:///./src/ui/icon.svg?514c","ui/components/Landing.tsx","state/index.ts","ui/components/Results/index.tsx","ui/icon.svg","ui/components/SearchBar.tsx","hooks/usePrevious.ts","ui/components/Phrase/Meaning.tsx","ui/components/Phrase/PhraseData.tsx","ui/components/Phrase/index.tsx","ui/App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["initDB","a","openDB","upgrade","db","_","version","console","log","allKanji","createObjectStore","keyPath","kanjiQueryStore","createIndex","multiEntry","allPhrases","phraseQueryStore","Promise","all","map","transaction","done","catch","error","jsonIterator","url","decoder","TextDecoder","fetch","response","reader","body","pipeThrough","DecompressionStream","getReader","open","inString","remaining","read","value","chunk","decode","lastBase","result","i","length","s","substring","push","JSON","parse","totalKanji","totalPhrases","addDataToDB","dataHandler","handleProgress","count","storeNames","handlers","identityHandler","entry","nameOrHandler","storeName","entryHandler","group","tx","data","h","filter","undefined","objectStore","put","path","join","process","addKanjiToDB","literal","readingMeaning","readings","flatMap","meaningGroupOrNanori","reading","type","toHiragana","addPhrasesToDB","phrase","queryJP","sequenceNumber","exact","partial","kanji","hiragana","sense","glossary","match","addDataIfNeeded","promises","kanjiProgress","phraseProgress","progress","_extends","Object","assign","target","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","id","cx","cy","r","fill","stroke","strokeWidth","SvgIcon","_ref","svgRef","title","titleId","props","xmlns","viewBox","ref","ForwardRef","Landing","useState","installed","setInstalled","installing","setInstalling","setProgress","canInstall","navigator","window","installPromptEvent","setInstallPromptEvent","useEffect","then","kanjiCount","phraseCount","handler","e","preventDefault","addEventListener","removeEventListener","handleInstall","useCallback","Math","floor","prompt","className","Boolean","href","onClick","store","query","dbPromise","phraseQueryIDPool","phraseResults","entryQueryIDPool","currentEntry","kanjiQueryIDPool","kanjiResults","makeAutoObservable","updateFactory","Function","fetchPhraseResults","passRomaji","fetchKanjiResults","runInAction","requestID","get","allLiterals","Set","queryTx","index","getAll","matches","forEach","add","results","kanjiTx","Array","from","sequenceNumbers","fetchExactSequenceNumbers","fetchPartialSequenceNumbers","number","IDBKeyRange","bound","PhraseResultListItem","observer","setCurrentEntry","sort","b","priority","form","meaning","PhraseResultList","SearchBar","inputRef","useRef","current","focus","handleChange","setQuery","src","icon","alt","onChange","placeholder","usePrevious","prevRef","humanReadablePartOfSpeech","adv","aux","conj","cop","ctr","exp","int","n","num","pn","pref","prt","suf","unc","v1","v4b","v4g","v4h","v4k","v4m","v4n","v4r","v4s","v4t","v5aru","v5b","v5g","v5k","v5m","v5n","v5r","v5s","v5t","v5u","v5uru","vi","vk","vn","vr","vs","vt","vz","humanReadableField","agric","anat","archeol","archit","art","astron","audvid","aviat","baseb","biochem","biol","bot","Buddh","bus","chem","Christn","comp","cryst","ecol","econ","elec","electr","embryo","engr","ent","finc","fish","food","gardn","genet","geogr","geol","geom","go","golf","gramm","grmyth","hanaf","horse","law","ling","logic","MA","mahj","math","mech","med","met","mil","music","ornith","paleo","pathol","pharm","phil","photo","physics","physiol","print","psych","Shinto","shogi","sports","stat","sumo","telec","tradem","vidg","zool","humanReadableMisc","abbr","arch","char","chn","col","company","creat","dated","dei","derog","ev","fam","fem","fict","given","hist","hon","hum","joc","leg","litf","male","myth","obj","obs","obsc","organization","oth","person","place","poet","pol","product","proverb","quote","rare","relig","sens","serv","sl","station","surname","uk","unclass","vulg","work","X","yoji","Meaning","partOfSpeech","reference","field","misc","pos","f","m","Word","Phrase","prevEntry","display","closeHandler","App","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","location","hostname","windowLoad","resolve","wrap","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","origin","headers","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.69476ba7.chunk.js","sourcesContent":["import { openDB } from 'idb'\n\nconst initDB = async () => {\n  const db = await openDB('kamatama', 1, {\n    upgrade: async (db, _, version) => {\n      console.log(`Upgrading database to version ${version}.`)\n\n      const allKanji = db.createObjectStore('allKanji', { keyPath: 'literal' })\n\n      const kanjiQueryStore = db.createObjectStore('kanjiQueryStore', {\n        keyPath: 'literal'\n      })\n\n      kanjiQueryStore.createIndex('readings', 'readings', { multiEntry: true })\n\n      const allPhrases = db.createObjectStore('allPhrases', {\n        keyPath: 'sequenceNumber'\n      })\n\n      const phraseQueryStore = db.createObjectStore('phraseQueryStore', {\n        keyPath: 'sequenceNumber'\n      })\n\n      phraseQueryStore.createIndex('exact', 'exact', { multiEntry: true })\n      phraseQueryStore.createIndex('partial', 'partial', { multiEntry: true })\n\n      await Promise.all(\n        [allKanji, allPhrases, phraseQueryStore, kanjiQueryStore].map(\n          ({ transaction }) => transaction.done\n        )\n      ).catch(console.error)\n\n      console.log(`Database upgraded to version ${version}`)\n    }\n  })\n\n  return db\n}\n\nexport default initDB\n","import { DecompressionStream } from '@stardazed/streams-compression'\n\n/**\n * Fetches a json file and iterates over all of the base objects.\n *\n * This parser is opinionated and makes assumptions about the data. Make sure\n * you understand how it works before you go ahead and copy/paste it into your\n * own project.\n *\n * @param url The url of the external json file\n */\nexport default async function* jsonIterator<T = any>(url: string) {\n  const decoder = new TextDecoder('utf-8')\n\n  const response = await fetch(url)\n  const reader = response.body\n    ?.pipeThrough(new DecompressionStream('gzip'))\n    .getReader()\n\n  if (!reader) {\n    return\n  }\n\n  // Counts the number of un-closed, open braces.\n  let open = 0\n\n  // A flag that reveals whether we are currently within a string.\n  let inString = false\n\n  // The start of a yet unclosed JSON object.\n  let remaining = ''\n\n  while (true) {\n    const { value, done } = await reader.read()\n    if (done) {\n      break\n    }\n    const chunk = value ? decoder.decode(value) : ''\n    let lastBase = -1\n    const result: T[] = []\n\n    for (let i = 0; i < chunk.length; i++) {\n      if (inString) {\n        if (chunk[i] === '\"') {\n          inString = false\n        } else if (chunk[i] === '\\\\') {\n          i += 1\n        }\n      } else if (chunk[i] === '\"') {\n        inString = true\n      } else if (chunk[i] === '{') {\n        if (open === 0) {\n          lastBase = i\n        }\n        open += 1\n      } else if (chunk[i] === '}') {\n        open -= 1\n        if (open === 0) {\n          if (lastBase < 0) {\n            const s = remaining + chunk.substring(0, i + 1)\n            try {\n              result.push(JSON.parse(remaining + chunk.substring(0, i + 1)))\n            } catch (e) {\n              console.log(s)\n              return\n            }\n          } else {\n            const s = chunk.substring(lastBase, i + 1)\n            try {\n              result.push(JSON.parse(chunk.substring(lastBase, i + 1)))\n            } catch (e) {\n              console.log(s)\n              return\n            }\n          }\n        }\n      }\n    }\n\n    yield result\n\n    if (open > 0) {\n      if (lastBase < 0) {\n        remaining += chunk\n      } else {\n        remaining = chunk.substring(lastBase)\n      }\n    }\n  }\n}\n","import { IDBPDatabase } from 'idb'\nimport path from 'path'\nimport { toHiragana } from 'wanakana'\nimport { JMEntry } from '../types/JMEntry'\nimport { KanjiCharacter } from '../types/Kanji'\nimport jsonIterator from './json-iterator'\n\nexport const totalKanji = 13108\nexport const totalPhrases = 190269\n\n/**\n * Adds data from a url to an IndexedDB.\n *\n * @param url A url to a gzipped json file containing entries of type T.\n * @param db The IndexedDB to add the data to.\n * @param dataHandler An array of store names and functions that will transform\n * an entry into data to put into said store. If the handler returns undefined,\n * the entry will not be added to the store.\n *\n * A lone string will just place the entries as-is into the store of that name.\n * @param handleProgress An optional method that will be called periodically,\n * reporting on the progress made in adding the data to the database. It will be\n * called with the number of processed entries.\n */\nexport async function addDataToDB<T>(\n  url: string,\n  db: IDBPDatabase,\n  dataHandler: (\n    | string\n    | {\n        storeName: string\n        entryHandler: (entry: T) => any\n      }\n  )[],\n  handleProgress?: (progress: number) => void\n) {\n  let count = 0\n\n  const storeNames: string[] = []\n  const handlers: ((entry: T) => any)[] = []\n  const identityHandler = (entry: T) => entry\n\n  for (const nameOrHandler of dataHandler) {\n    if (typeof nameOrHandler === 'string') {\n      storeNames.push(nameOrHandler)\n      handlers.push(identityHandler)\n    } else {\n      storeNames.push(nameOrHandler.storeName)\n      handlers.push(nameOrHandler.entryHandler)\n    }\n  }\n\n  for await (const group of jsonIterator<T>(\n    path.join(process.env.PUBLIC_URL, url)\n  )) {\n    const tx = db.transaction(storeNames, 'readwrite')\n\n    await Promise.all(\n      group.map((data) =>\n        Promise.all(\n          handlers\n            .map((h) => h(data))\n            .filter((entry) => entry !== undefined)\n            .map((entry, i) => tx.objectStore(storeNames[i]).put(entry))\n        )\n      )\n    )\n    await tx.done\n\n    count += group.length\n    if (handleProgress !== undefined) {\n      handleProgress(count)\n    }\n  }\n}\n\nexport const addKanjiToDB = async (\n  db: IDBPDatabase,\n  handleProgress?: (progress: number) => void\n) => {\n  return addDataToDB<KanjiCharacter>(\n    'dict/kanjidic2.json.gz',\n    db,\n    [\n      'allKanji',\n      {\n        storeName: 'kanjiQueryStore',\n        entryHandler: ({ literal, readingMeaning }) => {\n          const readings = readingMeaning?.flatMap((meaningGroupOrNanori) => {\n            if ('value' in meaningGroupOrNanori) {\n              return [meaningGroupOrNanori.value]\n            } else {\n              return meaningGroupOrNanori.reading\n                .filter(({ type }) => type === 'ja_kun' || type === 'ja_on')\n                .map(({ value }) => toHiragana(value))\n            }\n          })\n          if (readings && readings.length > 0) {\n            return { literal, readings }\n          }\n        }\n      }\n    ],\n    handleProgress\n  )\n}\n\nexport const addPhrasesToDB = async (\n  db: IDBPDatabase,\n  handleProgress?: (progress: number) => void\n) => {\n  return addDataToDB<JMEntry>(\n    'dict/JMdict.json.gz',\n    db,\n    [\n      'allPhrases',\n      {\n        storeName: 'phraseQueryStore',\n        entryHandler: (phrase) => {\n          const queryJP: {\n            sequenceNumber: number\n            exact: string[]\n            partial: string[]\n          } = {\n            sequenceNumber: phrase.sequenceNumber,\n            exact: [],\n            partial: []\n          }\n\n          for (const { value } of [...phrase.kanji, ...phrase.reading]) {\n            const hiragana = toHiragana(value)\n\n            queryJP.exact.push(hiragana)\n            for (let i = 1; i < hiragana.length; i++) {\n              queryJP.partial.push(hiragana.substring(i))\n            }\n          }\n\n          for (const meaning of phrase.sense.flatMap(({ glossary }) =>\n            glossary.flatMap(({ value }) => value)\n          )) {\n            const match = meaning.match(/^\\w+/)\n            if (match) {\n              queryJP.partial.push(match[0])\n            }\n          }\n\n          return queryJP\n        }\n      }\n    ],\n    handleProgress\n  )\n}\n\nexport const addDataIfNeeded = async (\n  db: IDBPDatabase,\n  handleProgress?: (progress: number) => void\n) => {\n  const promises = []\n  let kanjiProgress = 0\n  let phraseProgress = 0\n\n  if ((await db.count('allKanji')) < totalKanji) {\n    promises.push(\n      addKanjiToDB(db, (progress) => {\n        kanjiProgress = progress\n\n        if (handleProgress) {\n          handleProgress(kanjiProgress + phraseProgress)\n        }\n      })\n    )\n  } else {\n    kanjiProgress = totalKanji\n  }\n  if ((await db.count('allPhrases')) < totalPhrases) {\n    promises.push(\n      addPhrasesToDB(db, (progress) => {\n        phraseProgress = progress\n\n        if (handleProgress) {\n          handleProgress(kanjiProgress + phraseProgress)\n        }\n      })\n    )\n  } else {\n    phraseProgress = totalPhrases\n  }\n\n  await Promise.all(promises)\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"White\",\n  cx: 512,\n  cy: 512,\n  r: 507,\n  fill: \"#ffffff\",\n  stroke: \"#cccccc\",\n  strokeWidth: 10\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"Yolk\",\n  cx: 512,\n  cy: 512,\n  r: 200,\n  fill: \"#ffb43b\"\n}));\n\nfunction SvgIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 1024 1024\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgIcon);\nexport default __webpack_public_path__ + \"static/media/icon.b8f19d44.svg\";\nexport { ForwardRef as ReactComponent };","import { FC, useCallback, useEffect, useState } from 'react'\nimport initDB from '../../dictionary'\nimport {\n  addDataIfNeeded,\n  totalKanji,\n  totalPhrases\n} from '../../dictionary/add-data'\nimport { ReactComponent as Icon } from '../icon.svg'\nimport './Landing.scss'\n\nexport interface BeforeInstallPromptEvent extends Event {\n  prompt: () => Promise<void>\n}\n\nconst Landing: FC = () => {\n  const [installed, setInstalled] = useState(true)\n  const [installing, setInstalling] = useState(false)\n  const [progress, setProgress] = useState(0)\n\n  // Can the UA install PWAs?\n  const canInstall = 'serviceWorker' in navigator && 'indexedDB' in window\n  const [\n    installPromptEvent,\n    setInstallPromptEvent\n  ] = useState<BeforeInstallPromptEvent | null>(null)\n\n  useEffect(() => {\n    if (canInstall) {\n      initDB().then(async (db) => {\n        const kanjiCount = await db.count('allKanji')\n        const phraseCount = await db.count('allPhrases')\n\n        if (kanjiCount < totalKanji || phraseCount < totalPhrases) {\n          setInstalled(false)\n        }\n      })\n    } else {\n      setInstalled(false)\n    }\n  }, [canInstall])\n\n  // If the user can be prompted to install the app, we want to do that.\n  useEffect(() => {\n    const handler = (e: Event) => {\n      e.preventDefault()\n\n      setInstallPromptEvent((e as unknown) as BeforeInstallPromptEvent)\n    }\n\n    window.addEventListener('beforeinstallprompt', handler)\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handler)\n    }\n  }, [])\n\n  // If the app should be installed, we should add the data to the db and prompt\n  // the user to install the standalone PWA.\n  const handleInstall = useCallback(() => {\n    if (installed || !canInstall || installing) {\n      return\n    }\n\n    setInstalling(true)\n    initDB()\n      .then((db) =>\n        addDataIfNeeded(db, (progress) => {\n          setProgress(\n            Math.floor((100 * progress) / (totalKanji + totalPhrases))\n          )\n        })\n      )\n      .then(() => {\n        if (installPromptEvent !== null) {\n          installPromptEvent.prompt()\n        }\n        setInstalled(true)\n      })\n  }, [installPromptEvent, installed, canInstall, installing])\n\n  return (\n    <div\n      className={['Landing', installed && 'installed']\n        .filter(Boolean) // removes falsy classnames\n        .join(' ')}\n    >\n      <div className=\"content\">\n        <h1>こんにちは!</h1>\n        <p>\n          This is Kamatama Jisho, a Japanese-English phrase book powered by the\n          web!\n        </p>\n        {canInstall ? (\n          <>\n            <p>\n              To install Kamatama Jisho, just press the big egg down below. The\n              dictionary download is about 10.5MB.\n            </p>\n            <p>\n              The download will likely be quite fast, but the data must then be\n              loaded into the database. This could take a long time. (3-4 mins)\n            </p>\n            <p>\n              If you close the page while it is loading, it may pause or even\n              cancel, and you will have to load the data again. (Note that you\n              will not have to download the data again, because it will be\n              cached)\n            </p>\n          </>\n        ) : (\n          <p>\n            Uh oh! The device you are using is not capable of installing{' '}\n            <a href=\"https://en.wikipedia.org/wiki/Progressive_web_application\">\n              PWAs\n            </a>\n            . Perhaps try a different device, or a different browser!\n          </p>\n        )}\n      </div>\n      {canInstall && (\n        <button className=\"icon\">\n          <div\n            className={['progress', installing && 'visible']\n              .filter(Boolean)\n              .join(' ')}\n          >\n            {progress}%\n          </div>\n          <Icon onClick={handleInstall} />\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default Landing\n","import { IDBPDatabase } from 'idb'\nimport { makeAutoObservable, runInAction } from 'mobx'\nimport { toHiragana } from 'wanakana'\nimport initDB from '../dictionary'\nimport { JMEntry } from '../types/JMEntry'\nimport { KanjiCharacter } from '../types/Kanji'\n\n/**\n * Represents a store of the app's state.\n */\nexport class KamatamaJishoStore {\n  /** The current search query. */\n  query: string\n  dbPromise: Promise<IDBPDatabase>\n\n  /**\n   * A counter to increment on result fetching.\n   *\n   * If the results come back and the counter has been increased, we should\n   * abandon the results.\n   */\n  phraseQueryIDPool: number\n  phraseResults: JMEntry[]\n\n  /**\n   * See `phraseQueryIDPool`.\n   */\n  entryQueryIDPool: number\n  /**\n   * The currently selected entry. Will be undefined if there is no selected\n   * entry.\n   */\n  currentEntry?: JMEntry\n\n  /**\n   * See `phraseQueryIDPool`.\n   */\n  kanjiQueryIDPool: number\n  kanjiResults: KanjiCharacter[]\n\n  constructor() {\n    makeAutoObservable(this)\n\n    this.query = ''\n    this.dbPromise = initDB()\n\n    this.phraseQueryIDPool = 0\n    this.phraseResults = []\n\n    this.entryQueryIDPool = 0\n    // this.currentEntry = undefined\n\n    this.kanjiQueryIDPool = 0\n    this.kanjiResults = []\n  }\n\n  setQuery(updateFactory: string | ((priorQuery: string) => string)) {\n    if (updateFactory instanceof Function) {\n      this.query = updateFactory(this.query)\n    } else {\n      this.query = updateFactory\n    }\n    this.fetchPhraseResults(toHiragana(this.query, { passRomaji: true }))\n    this.fetchKanjiResults(toHiragana(this.query, { passRomaji: true }))\n  }\n\n  async setCurrentEntry(sequenceNumber: number) {\n    if (sequenceNumber === -1) {\n      runInAction(() => {\n        this.currentEntry = undefined\n      })\n      return\n    }\n    const requestID = ++this.entryQueryIDPool\n    const db = await this.dbPromise\n\n    const tx = db.transaction('allPhrases')\n\n    const result = await tx.store.get(sequenceNumber)\n\n    if (this.entryQueryIDPool === requestID) {\n      runInAction(() => {\n        this.currentEntry = result\n      })\n    }\n  }\n\n  private async fetchKanjiResults(query: string) {\n    if (query === '') {\n      runInAction(() => {\n        this.kanjiResults = []\n      })\n      return\n    }\n    const requestID = ++this.kanjiQueryIDPool\n    const allLiterals = new Set<string>()\n\n    const db = await this.dbPromise\n\n    // Get the literals by searching for their reaadings.\n    const queryTx = db.transaction('kanjiQueryStore')\n\n    await queryTx.store\n      .index('readings')\n      .getAll(query)\n      .then((matches) =>\n        matches.forEach(({ literal }) => allLiterals.add(literal))\n      )\n\n    await queryTx.done\n\n    // Now get the characters by their literals.\n    const results: KanjiCharacter[] = []\n\n    const kanjiTx = db.transaction('allKanji')\n\n    await Promise.all(\n      Array.from(allLiterals).map(async (literal) => {\n        const kanji = await kanjiTx.store.get(literal)\n\n        results.push(kanji)\n      })\n    )\n\n    if (requestID === this.kanjiQueryIDPool) {\n      runInAction(() => {\n        this.kanjiResults = results\n      })\n    }\n  }\n\n  /**\n   * Searches the phrases for any matches to the given query and updates the\n   * results when done.\n   */\n  private async fetchPhraseResults(query: string) {\n    if (query === '') {\n      runInAction(() => {\n        this.phraseResults = []\n      })\n      return\n    }\n    const requestID = ++this.phraseQueryIDPool\n\n    const sequenceNumbers = new Set<number>()\n\n    await this.fetchExactSequenceNumbers(query, sequenceNumbers)\n    await this.fetchPartialSequenceNumbers(query, sequenceNumbers)\n\n    const db = await this.dbPromise\n    const tx = db.transaction('allPhrases')\n\n    const results: JMEntry[] = []\n\n    await Promise.all(\n      Array.from(sequenceNumbers).map(async (number) => {\n        const entry = await tx.store.get(number)\n\n        results.push(entry)\n      })\n    )\n\n    if (requestID === this.phraseQueryIDPool) {\n      runInAction(() => {\n        this.phraseResults = results\n      })\n    }\n  }\n\n  /**\n   * Searches the query store to find any exact matches.\n   *\n   * @param query The query to match exactly\n   * @param sequenceNumbers A set to populate with the results of the query.\n   */\n  private async fetchExactSequenceNumbers(\n    query: string,\n    sequenceNumbers: Set<number>\n  ) {\n    const db = await this.dbPromise\n\n    const tx = db.transaction('phraseQueryStore')\n\n    await tx.store\n      .index('exact')\n      .getAll(query)\n      .then((matches) => {\n        matches.forEach(({ sequenceNumber }) => {\n          sequenceNumbers.add(sequenceNumber)\n        })\n      })\n\n    await tx.done\n  }\n\n  /**\n   * Searches the query store to find any partial matches.\n   *\n   * @param query The query to match exactly\n   * @param sequenceNumbers A set to populate with the results of the query.\n   */\n  private async fetchPartialSequenceNumbers(\n    query: string,\n    sequenceNumbers: Set<number>\n  ) {\n    const db = await this.dbPromise\n\n    const tx = db.transaction('phraseQueryStore')\n\n    await Promise.all([\n      tx.store\n        .index('exact')\n        .getAll(IDBKeyRange.bound(query, query + '\\uffff'), 30)\n        .then((matches) => {\n          matches.forEach(({ sequenceNumber }) => {\n            sequenceNumbers.add(sequenceNumber)\n          })\n        }),\n      tx.store\n        .index('partial')\n        .getAll(IDBKeyRange.bound(query, query + '\\uffff'), 30)\n        .then((matches) => {\n          matches.forEach(({ sequenceNumber }) => {\n            sequenceNumbers.add(sequenceNumber)\n          })\n        })\n    ])\n\n    await tx.done\n  }\n}\n\nconst store = new KamatamaJishoStore()\nexport default store\n","import { observer } from 'mobx-react-lite'\nimport { FC } from 'react'\nimport store from '../../../state'\nimport { JMEntry } from '../../../types/JMEntry'\nimport './Results.scss'\n\nconst PhraseResultListItem: FC<JMEntry> = observer(\n  ({ sequenceNumber, reading, kanji, sense }) => {\n    return (\n      <li\n        className=\"ResultListItem\"\n        onClick={() => {\n          store.setCurrentEntry(sequenceNumber)\n        }}\n      >\n        <div className=\"forms\">\n          {\n            [...kanji, ...reading]\n              .sort((a, b) => a.priority.length - b.priority.length)\n              .map((form) => form.value)\n              .join('、') // We should join Japanese with the full width comma.\n          }\n        </div>\n        <div className=\"meanings\">\n          {sense\n            .flatMap((meaning) => meaning.glossary)\n            .map((glossary) => glossary.value)\n            .join(', ')}\n        </div>\n      </li>\n    )\n  }\n)\n\n/**\n * A list of the results for the current query.\n */\nconst PhraseResultList: FC<{\n  results: JMEntry[]\n}> = observer(() => {\n  const { phraseResults } = store\n\n  return (\n    <ul className=\"ResultList\">\n      {phraseResults.map((phrase) => (\n        <PhraseResultListItem key={phrase.sequenceNumber} {...phrase} />\n      ))}\n    </ul>\n  )\n})\n\nexport default PhraseResultList\n","export default __webpack_public_path__ + \"static/media/icon.b8f19d44.svg\";","import { ChangeEvent, FC, useCallback, useEffect, useRef } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport store from '../../state'\nimport icon from '../icon.svg'\nimport './SearchBar.scss'\n\nconst SearchBar: FC = observer(() => {\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    inputRef.current?.focus()\n  }, [])\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    store.setQuery(e.target.value)\n  }, [])\n\n  return (\n    <div className=\"SearchBar\">\n      <img className=\"icon\" src={icon} alt=\"icon\" />\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={store.query}\n        onChange={handleChange}\n        placeholder=\"Search here...\"\n      />\n      <button className=\"Radicals\">字</button>\n    </div>\n  )\n})\n\nexport default SearchBar\n","import { useEffect, useRef } from 'react'\n\n/**\n * Provides the value of a target parameter on the previous **render** (Even if\n * the target is unchanged).\n *\n * @param target The value to track\n */\nfunction usePrevious<T>(target: T): T | undefined {\n  const prevRef = useRef<T | undefined>()\n\n  useEffect(() => {\n    prevRef.current = target\n  }, [target])\n\n  return prevRef.current\n}\n\nexport default usePrevious\n","import { FC } from 'react'\nimport { JMSense } from '../../../types/JMEntry'\n\nconst humanReadablePartOfSpeech = {\n  'adj-f': 'noun or verb acting prenominally',\n  'adj-i': 'adjective (keiyoushi)',\n  'adj-ix': 'adjective (keiyoushi) - yoi/ii class',\n  'adj-kari': \"'kari' adjective (archaic)\",\n  'adj-ku': \"'ku' adjective (archaic)\",\n  'adj-na': 'adjectival nouns or quasi-adjectives (keiyodoshi)',\n  'adj-nari': 'archaic/formal form of na-adjective',\n  'adj-no': \"nouns which may take the genitive case particle 'no'\",\n  'adj-pn': 'pre-noun adjectival (rentaishi)',\n  'adj-shiku': \"'shiku' adjective (archaic)\",\n  'adj-t': \"'taru' adjective\",\n  adv: 'adverb (fukushi)',\n  'adv-to': \"adverb taking the 'to' particle\",\n  aux: 'auxiliary',\n  'aux-adj': 'auxiliary adjective',\n  'aux-v': 'auxiliary verb',\n  conj: 'conjunction',\n  cop: 'copula',\n  ctr: 'counter',\n  exp: 'expressions (phrases, clauses, etc.)',\n  int: 'interjection (kandoushi)',\n  n: 'noun (common) (futsuumeishi)',\n  'n-adv': 'adverbial noun (fukushitekimeishi)',\n  'n-pr': 'proper noun',\n  'n-pref': 'noun, used as a prefix',\n  'n-suf': 'noun, used as a suffix',\n  'n-t': 'noun (temporal) (jisoumeishi)',\n  num: 'numeric',\n  pn: 'pronoun',\n  pref: 'prefix',\n  prt: 'particle',\n  suf: 'suffix',\n  unc: 'unclassified',\n  'v-unspec': 'verb unspecified',\n  v1: 'Ichidan verb',\n  'v1-s': 'Ichidan verb - kureru special class',\n  'v2a-s': \"Nidan verb with 'u' ending (archaic)\",\n  'v2b-k': \"Nidan verb (upper class) with 'bu' ending (archaic)\",\n  'v2b-s': \"Nidan verb (lower class) with 'bu' ending (archaic)\",\n  'v2d-k': \"Nidan verb (upper class) with 'dzu' ending (archaic)\",\n  'v2d-s': \"Nidan verb (lower class) with 'dzu' ending (archaic)\",\n  'v2g-k': \"Nidan verb (upper class) with 'gu' ending (archaic)\",\n  'v2g-s': \"Nidan verb (lower class) with 'gu' ending (archaic)\",\n  'v2h-k': \"Nidan verb (upper class) with 'hu/fu' ending (archaic)\",\n  'v2h-s': \"Nidan verb (lower class) with 'hu/fu' ending (archaic)\",\n  'v2k-k': \"Nidan verb (upper class) with 'ku' ending (archaic)\",\n  'v2k-s': \"Nidan verb (lower class) with 'ku' ending (archaic)\",\n  'v2m-k': \"Nidan verb (upper class) with 'mu' ending (archaic)\",\n  'v2m-s': \"Nidan verb (lower class) with 'mu' ending (archaic)\",\n  'v2n-s': \"Nidan verb (lower class) with 'nu' ending (archaic)\",\n  'v2r-k': \"Nidan verb (upper class) with 'ru' ending (archaic)\",\n  'v2r-s': \"Nidan verb (lower class) with 'ru' ending (archaic)\",\n  'v2s-s': \"Nidan verb (lower class) with 'su' ending (archaic)\",\n  'v2t-k': \"Nidan verb (upper class) with 'tsu' ending (archaic)\",\n  'v2t-s': \"Nidan verb (lower class) with 'tsu' ending (archaic)\",\n  'v2w-s':\n    \"Nidan verb (lower class) with 'u' ending and 'we' conjugation (archaic)\",\n  'v2y-k': \"Nidan verb (upper class) with 'yu' ending (archaic)\",\n  'v2y-s': \"Nidan verb (lower class) with 'yu' ending (archaic)\",\n  'v2z-s': \"Nidan verb (lower class) with 'zu' ending (archaic)\",\n  v4b: \"Yodan verb with 'bu' ending (archaic)\",\n  v4g: \"Yodan verb with 'gu' ending (archaic)\",\n  v4h: \"Yodan verb with 'hu/fu' ending (archaic)\",\n  v4k: \"Yodan verb with 'ku' ending (archaic)\",\n  v4m: \"Yodan verb with 'mu' ending (archaic)\",\n  v4n: \"Yodan verb with 'nu' ending (archaic)\",\n  v4r: \"Yodan verb with 'ru' ending (archaic)\",\n  v4s: \"Yodan verb with 'su' ending (archaic)\",\n  v4t: \"Yodan verb with 'tsu' ending (archaic)\",\n  v5aru: 'Godan verb - -aru special class',\n  v5b: \"Godan verb with 'bu' ending\",\n  v5g: \"Godan verb with 'gu' ending\",\n  v5k: \"Godan verb with 'ku' ending\",\n  'v5k-s': 'Godan verb - Iku/Yuku special class',\n  v5m: \"Godan verb with 'mu' ending\",\n  v5n: \"Godan verb with 'nu' ending\",\n  v5r: \"Godan verb with 'ru' ending\",\n  'v5r-i': \"Godan verb with 'ru' ending (irregular verb)\",\n  v5s: \"Godan verb with 'su' ending\",\n  v5t: \"Godan verb with 'tsu' ending\",\n  v5u: \"Godan verb with 'u' ending\",\n  'v5u-s': \"Godan verb with 'u' ending (special class)\",\n  v5uru: 'Godan verb - Uru old class verb (old form of Eru)',\n  vi: 'intransitive verb',\n  vk: 'Kuru verb - special class',\n  vn: 'irregular nu verb',\n  vr: 'irregular ru verb, plain form ends with -ri',\n  vs: 'noun or participle which takes the aux. verb suru',\n  'vs-c': 'su verb - precursor to the modern suru',\n  'vs-i': 'suru verb - included',\n  'vs-s': 'suru verb - special class',\n  vt: 'transitive verb',\n  vz: 'Ichidan verb - zuru verb (alternative form of -jiru verbs)'\n}\n\nconst humanReadableField = {\n  agric: 'agriculture',\n  anat: 'anatomy',\n  archeol: 'archeology',\n  archit: 'architecture, building',\n  art: 'art, aesthetics',\n  astron: 'astronomy',\n  audvid: 'audio-visual',\n  aviat: 'aviation',\n  baseb: 'baseball',\n  biochem: 'biochemistry',\n  biol: 'biology',\n  bot: 'botany',\n  Buddh: 'Buddhism',\n  bus: 'business',\n  chem: 'chemistry',\n  Christn: 'Christianity',\n  comp: 'computing',\n  cryst: 'crystallography',\n  ecol: 'ecology',\n  econ: 'economics',\n  elec: 'electricity, elec. eng.',\n  electr: 'electronics',\n  embryo: 'embryology',\n  engr: 'engineering',\n  ent: 'entomology',\n  finc: 'finance',\n  fish: 'fishing',\n  food: 'food, cooking',\n  gardn: 'gardening, horticulture',\n  genet: 'genetics',\n  geogr: 'geography',\n  geol: 'geology',\n  geom: 'geometry',\n  go: 'go (game)',\n  golf: 'golf',\n  gramm: 'grammar',\n  grmyth: 'Greek mythology',\n  hanaf: 'hanafuda',\n  horse: 'horse-racing',\n  law: 'law',\n  ling: 'linguistics',\n  logic: 'logic',\n  MA: 'martial arts',\n  mahj: 'mahjong',\n  math: 'mathematics',\n  mech: 'mechanical engineering',\n  med: 'medicine',\n  met: 'climate, weather',\n  mil: 'military',\n  music: 'music',\n  ornith: 'ornithology',\n  paleo: 'paleontology',\n  pathol: 'pathology',\n  pharm: 'pharmacy',\n  phil: 'philosophy',\n  photo: 'photography',\n  physics: 'physics',\n  physiol: 'physiology',\n  print: 'printing',\n  psych: 'psychology, psychiatry',\n  Shinto: 'Shinto',\n  shogi: 'shogi',\n  sports: 'sports',\n  stat: 'statistics',\n  sumo: 'sumo',\n  telec: 'telecommunications',\n  tradem: 'trademark',\n  vidg: 'video game',\n  zool: 'zoology'\n}\n\nconst humanReadableMisc = {\n  abbr: 'abbreviation',\n  arch: 'archaism',\n  char: 'character',\n  chn: \"children's language\",\n  col: 'colloquialism',\n  company: 'company name',\n  creat: 'creature',\n  dated: 'dated term',\n  dei: 'deity',\n  derog: 'derogatory',\n  ev: 'event',\n  fam: 'familiar language',\n  fem: 'female term or language',\n  fict: 'fiction',\n  given: 'given name or forename, gender not specified',\n  hist: 'historical term',\n  hon: 'honorific or respectful (sonkeigo) language',\n  hum: 'humble (kenjougo) language',\n  id: 'idiomatic expression',\n  joc: 'jocular, humorous term',\n  leg: 'legend',\n  litf: 'literary or formal term',\n  'm-sl': 'manga slang',\n  male: 'male term or language',\n  myth: 'mythology',\n  'net-sl': 'Internet slang',\n  obj: 'object',\n  obs: 'obsolete term',\n  obsc: 'obscure term',\n  'on-mim': 'onomatopoeic or mimetic word',\n  organization: 'organization name',\n  oth: 'other',\n  person: 'full name of a particular person',\n  place: 'place name',\n  poet: 'poetical term',\n  pol: 'polite (teineigo) language',\n  product: 'product name',\n  proverb: 'proverb',\n  quote: 'quotation',\n  rare: 'rare',\n  relig: 'religion',\n  sens: 'sensitive',\n  serv: 'service',\n  sl: 'slang',\n  station: 'railway station',\n  surname: 'family or surname',\n  uk: 'word usually written using kana alone',\n  unclass: 'unclassified name',\n  vulg: 'vulgar expression or word',\n  work: 'work of art, literature, music, etc. name',\n  X: 'rude or X-rated term (not displayed in educational software)',\n  yoji: 'yojijukugo'\n}\n\nconst Meaning: FC<JMSense> = ({\n  kanji,\n  reading,\n  partOfSpeech,\n  reference,\n  field,\n  misc,\n  glossary\n}) => {\n  return (\n    <li className=\"Meaning\">\n      {kanji.length + reading.length > 0 && (\n        <span className=\"info restriction\">\n          Meaning restricted to {[...kanji, ...reading].join(', ')}\n        </span>\n      )}\n      {partOfSpeech.length > 0 && (\n        <span className=\"info partOfSpeech\">\n          {partOfSpeech.map((pos) => humanReadablePartOfSpeech[pos]).join(', ')}\n        </span>\n      )}\n      {reference.length > 0 && (\n        <span className=\"info seeAlso\">See also: {reference.join(', ')}</span>\n      )}\n      {field.length > 0 && (\n        <span className=\"info field\">\n          Related to: {field.map((f) => humanReadableField[f]).join(', ')}\n        </span>\n      )}\n      {misc.length > 0 && (\n        <span className=\"info misc\">\n          {misc.map((m) => humanReadableMisc[m]).join(', ')}\n        </span>\n      )}\n      {glossary.length > 0 && (\n        <div className=\"glossary\">\n          {glossary.map(({ value }) => (\n            <div className=\"item\" key={value}>\n              {value}\n            </div>\n          ))}\n        </div>\n      )}\n    </li>\n  )\n}\n\nexport default Meaning\n","import { FC } from 'react'\nimport { JMEntry } from '../../../types/JMEntry'\nimport Meaning from './Meaning'\n\nconst Word: FC<JMEntry> = ({ kanji, reading, sense }) => {\n  return (\n    <div className=\"PhraseData\">\n      <ul className=\"kanjis\">\n        {kanji.map(({ value }) => (\n          <li key={value}>{value}</li>\n        ))}\n      </ul>\n      {kanji.length > 0 && reading.length > 0 && <h2>Reading</h2>}\n      <ul className=\"readings\">\n        {reading.map(({ value }) => (\n          <li key={value}>{value}</li>\n        ))}\n      </ul>\n      <h2>Meaning</h2>\n      <ul className=\"meanings\">\n        {sense.map((sense, i) => (\n          <Meaning key={i} {...sense} />\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Word\n","import { observer } from 'mobx-react-lite'\nimport { FC, useCallback, useEffect } from 'react'\nimport usePrevious from '../../../hooks/usePrevious'\nimport store from '../../../state'\nimport './Phrase.scss'\nimport Word from './PhraseData'\n\n/**\n * A page that contains the data for a phrase.\n */\nconst Phrase: FC = observer(() => {\n  const entry = store.currentEntry\n  const prevEntry = usePrevious(entry)\n  const display = entry || prevEntry\n\n  const closeHandler = useCallback(() => {\n    store.setCurrentEntry(-1)\n  }, [])\n\n  useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      if (e.key === 'Esc' || e.key === 'Escape') {\n        closeHandler()\n      }\n    }\n\n    window.addEventListener('keydown', handler)\n    return () => {\n      window.removeEventListener('keydown', handler)\n    }\n  }, [closeHandler])\n\n  return (\n    <div className={['Phrase', entry && 'valid'].filter(Boolean).join(' ')}>\n      <button onClick={closeHandler}>close</button>\n      {display && <Word {...display} />}\n    </div>\n  )\n})\n\nexport default Phrase\n","import { FC } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport Landing from './components/Landing'\nimport store from '../state'\nimport PhraseResultList from './components/Results'\nimport SearchBar from './components/SearchBar'\nimport './App.scss'\nimport Phrase from './components/Phrase'\n\nconst App: FC = observer(() => {\n  return (\n    <div className=\"App\">\n      <Landing />\n      <Phrase />\n      <SearchBar />\n      <PhraseResultList results={store.phraseResults} />\n    </div>\n  )\n})\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nconst windowLoad = new Promise<void>((resolve) => {\n  const wrap = () => {\n    resolve()\n    window.removeEventListener('load', wrap)\n  }\n  window.addEventListener('load', wrap)\n})\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    windowLoad.then(() => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './ui/App'\nimport reportWebVitals from './reportWebVitals'\nimport { register } from './serviceWorkerRegistration'\nimport './index.scss'\nimport '@stardazed/streams-polyfill'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\nregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}