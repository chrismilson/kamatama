{"version":3,"sources":["dictionary/index.ts","dictionary/json-iterator.ts","dictionary/add-data.ts","webpack:///./src/ui/icon.svg?514c","ui/components/Landing.tsx","hooks/usePrevious.ts","state/index.ts","ui/components/Phrase/Meaning.tsx","ui/components/Phrase/PhraseData.tsx","ui/components/Phrase/index.tsx","ui/components/RadicalSearch/RadicalResultList.tsx","ui/components/RadicalSearch/common.ts","ui/components/RadicalSearch/RadicalSearchBar.tsx","ui/components/RadicalSearch/index.tsx","ui/components/PhraseSearch/PhraseResults.tsx","ui/icon.svg","ui/components/PhraseSearch/radical-search-icon.svg","ui/components/PhraseSearch/SearchBar.tsx","ui/components/PhraseSearch/index.tsx","ui/App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["initDB","a","openDB","upgrade","db","_","version","console","log","allKanji","createObjectStore","keyPath","createIndex","multiEntry","kanjiQueryStore","allPhrases","phraseQueryStore","Promise","all","map","transaction","done","catch","error","jsonIterator","url","decoder","TextDecoder","fetch","response","reader","body","pipeThrough","DecompressionStream","getReader","open","inString","remaining","read","value","chunk","decode","lastBase","result","i","length","s","substring","push","JSON","parse","totalKanji","totalPhrases","addDataToDB","dataHandler","handleProgress","count","storeNames","handlers","identityHandler","entry","nameOrHandler","storeName","entryHandler","group","tx","data","h","filter","undefined","objectStore","put","path","join","process","addKanjiToDB","literal","readingMeaning","reading","flatMap","meaningGroupOrNanori","toHiragana","addPhrasesToDB","phrase","queryJP","sequenceNumber","exact","partial","kanji","hiragana","sense","glossary","lower","toLowerCase","Array","from","matchAll","index","addDataIfNeeded","promises","kanjiProgress","phraseProgress","progress","_extends","Object","assign","target","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","id","cx","cy","r","fill","stroke","strokeWidth","SvgIcon","_ref","svgRef","title","titleId","props","xmlns","viewBox","ref","ForwardRef","Landing","useState","installed","setInstalled","installing","setInstalling","setProgress","canInstall","navigator","window","installPromptEvent","setInstallPromptEvent","useEffect","then","kanjiCount","phraseCount","handler","e","preventDefault","addEventListener","removeEventListener","handleInstall","useCallback","Math","floor","prompt","className","Boolean","href","onClick","usePrevious","prevRef","useRef","current","store","query","dbPromise","phraseQueryIDPool","phraseResults","entryQueryIDPool","currentEntry","kanjiQueryIDPool","kanjiResults","searchByRadical","radicalRequestIDPool","radicalQuery","radicalMultiset","radicalResult","makeAutoObservable","Set","updateFactory","Function","fetchPhraseResults","passRomaji","fetchKanjiResults","runInAction","requestID","get","radical","has","change","delete","add","fetchKanjiByRadical","updateRadicalResults","size","literals","entries","getAllKeys","allLiterals","queryTx","getAll","matches","forEach","results","kanjiTx","sequenceNumbers","fetchExactSequenceNumbers","fetchPartialSequenceNumbers","number","IDBKeyRange","bound","humanReadablePartOfSpeech","adv","aux","conj","cop","ctr","exp","int","n","num","pn","pref","prt","suf","unc","v1","v4b","v4g","v4h","v4k","v4m","v4n","v4r","v4s","v4t","v5aru","v5b","v5g","v5k","v5m","v5n","v5r","v5s","v5t","v5u","v5uru","vi","vk","vn","vr","vs","vt","vz","humanReadableField","agric","anat","archeol","archit","art","astron","audvid","aviat","baseb","biochem","biol","bot","Buddh","bus","chem","Christn","comp","cryst","ecol","econ","elec","electr","embryo","engr","ent","finc","fish","food","gardn","genet","geogr","geol","geom","go","golf","gramm","grmyth","hanaf","horse","law","ling","logic","MA","mahj","math","mech","med","met","mil","music","ornith","paleo","pathol","pharm","phil","photo","physics","physiol","print","psych","Shinto","shogi","sports","stat","sumo","telec","tradem","vidg","zool","humanReadableMisc","abbr","arch","char","chn","col","company","creat","dated","dei","derog","ev","fam","fem","fict","given","hist","hon","hum","joc","leg","litf","male","myth","obj","obs","obsc","organization","oth","person","place","poet","pol","product","proverb","quote","rare","relig","sens","serv","sl","station","surname","uk","unclass","vulg","work","X","yoji","Meaning","partOfSpeech","reference","field","misc","pos","f","m","Word","Phrase","observer","prevEntry","display","closeHandler","setCurrentEntry","RadicalResultListItem","setQuery","old","possiblyNanori","meaningGroup","meaning","RadicalResultList","slice","radicalsByStrokeCount","split","RadicalButton","selected","toggleRadicalQuery","RadicalSearchBar","radicals","strokes","strokeCount","RadicalSearch","active","PhraseResultListItem","sort","b","priority","form","PhraseResultList","SearchBar","inputRef","focus","handleChange","src","icon","alt","type","onChange","placeholder","radicalSearchIcon","PhraseSearch","App","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","location","hostname","match","windowLoad","resolve","wrap","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","origin","headers","contentType","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.86d96868.chunk.js","sourcesContent":["import { openDB } from 'idb'\n\nconst initDB = async () => {\n  const db = await openDB('kamatama', 1, {\n    upgrade: async (db, _, version) => {\n      console.log(`Upgrading database to version ${version}.`)\n\n      const allKanji = db.createObjectStore('allKanji', { keyPath: 'literal' })\n\n      // Since the radical is already in a form that we can index by, there is\n      // no point adding it to the db twice.\n      allKanji.createIndex('radical', 'radical', { multiEntry: true })\n\n      const kanjiQueryStore = db.createObjectStore('kanjiQueryStore', {\n        keyPath: 'literal'\n      })\n\n      kanjiQueryStore.createIndex('reading', 'reading', { multiEntry: true })\n\n      const allPhrases = db.createObjectStore('allPhrases', {\n        keyPath: 'sequenceNumber'\n      })\n\n      const phraseQueryStore = db.createObjectStore('phraseQueryStore', {\n        keyPath: 'sequenceNumber'\n      })\n\n      phraseQueryStore.createIndex('exact', 'exact', { multiEntry: true })\n      phraseQueryStore.createIndex('partial', 'partial', { multiEntry: true })\n\n      await Promise.all(\n        [allKanji, allPhrases, phraseQueryStore, kanjiQueryStore].map(\n          ({ transaction }) => transaction.done\n        )\n      ).catch(console.error)\n\n      console.log(`Database upgraded to version ${version}`)\n    }\n  })\n\n  return db\n}\n\nexport default initDB\n","import { DecompressionStream } from '@stardazed/streams-compression'\n\n/**\n * Fetches a json file and iterates over all of the base objects.\n *\n * This parser is opinionated and makes assumptions about the data. Make sure\n * you understand how it works before you go ahead and copy/paste it into your\n * own project.\n *\n * @param url The url of the external json file\n */\nexport default async function* jsonIterator<T = any>(url: string) {\n  const decoder = new TextDecoder('utf-8')\n\n  const response = await fetch(url)\n  const reader = response.body\n    ?.pipeThrough(new DecompressionStream('gzip'))\n    .getReader()\n\n  if (!reader) {\n    return\n  }\n\n  // Counts the number of un-closed, open braces.\n  let open = 0\n\n  // A flag that reveals whether we are currently within a string.\n  let inString = false\n\n  // The start of a yet unclosed JSON object.\n  let remaining = ''\n\n  while (true) {\n    const { value, done } = await reader.read()\n    if (done) {\n      break\n    }\n    const chunk = value ? decoder.decode(value) : ''\n    let lastBase = -1\n    const result: T[] = []\n\n    for (let i = 0; i < chunk.length; i++) {\n      if (inString) {\n        if (chunk[i] === '\"') {\n          inString = false\n        } else if (chunk[i] === '\\\\') {\n          i += 1\n        }\n      } else if (chunk[i] === '\"') {\n        inString = true\n      } else if (chunk[i] === '{') {\n        if (open === 0) {\n          lastBase = i\n        }\n        open += 1\n      } else if (chunk[i] === '}') {\n        open -= 1\n        if (open === 0) {\n          if (lastBase < 0) {\n            const s = remaining + chunk.substring(0, i + 1)\n            try {\n              result.push(JSON.parse(remaining + chunk.substring(0, i + 1)))\n            } catch (e) {\n              console.log(s)\n              return\n            }\n          } else {\n            const s = chunk.substring(lastBase, i + 1)\n            try {\n              result.push(JSON.parse(chunk.substring(lastBase, i + 1)))\n            } catch (e) {\n              console.log(s)\n              return\n            }\n          }\n        }\n      }\n    }\n\n    yield result\n\n    if (open > 0) {\n      if (lastBase < 0) {\n        remaining += chunk\n      } else {\n        remaining = chunk.substring(lastBase)\n      }\n    }\n  }\n}\n","import { IDBPDatabase } from 'idb'\nimport path from 'path'\nimport { toHiragana } from 'wanakana'\nimport { JMEntry } from '../types/JMEntry'\nimport { KanjiCharacter } from '../types/Kanji'\nimport jsonIterator from './json-iterator'\n\nexport const totalKanji = 13108\nexport const totalPhrases = 190269\n\n/**\n * Adds data from a url to an IndexedDB.\n *\n * @param url A url to a gzipped json file containing entries of type T.\n * @param db The IndexedDB to add the data to.\n * @param dataHandler An array of store names and functions that will transform\n * an entry into data to put into said store. If the handler returns undefined,\n * the entry will not be added to the store.\n *\n * A lone string will just place the entries as-is into the store of that name.\n * @param handleProgress An optional method that will be called periodically,\n * reporting on the progress made in adding the data to the database. It will be\n * called with the number of processed entries.\n */\nexport async function addDataToDB<T>(\n  url: string,\n  db: IDBPDatabase,\n  dataHandler: (\n    | string\n    | {\n        storeName: string\n        entryHandler: (entry: T) => any\n      }\n  )[],\n  handleProgress?: (progress: number) => void\n) {\n  let count = 0\n\n  const storeNames: string[] = []\n  const handlers: ((entry: T) => any)[] = []\n  const identityHandler = (entry: T) => entry\n\n  for (const nameOrHandler of dataHandler) {\n    if (typeof nameOrHandler === 'string') {\n      storeNames.push(nameOrHandler)\n      handlers.push(identityHandler)\n    } else {\n      storeNames.push(nameOrHandler.storeName)\n      handlers.push(nameOrHandler.entryHandler)\n    }\n  }\n\n  for await (const group of jsonIterator<T>(\n    path.join(process.env.PUBLIC_URL, url)\n  )) {\n    const tx = db.transaction(storeNames, 'readwrite')\n\n    await Promise.all(\n      group.map((data) =>\n        Promise.all(\n          handlers\n            .map((h) => h(data))\n            .filter((entry) => entry !== undefined)\n            .map((entry, i) => tx.objectStore(storeNames[i]).put(entry))\n        )\n      )\n    )\n    await tx.done\n\n    count += group.length\n    if (handleProgress !== undefined) {\n      handleProgress(count)\n    }\n  }\n}\n\nexport const addKanjiToDB = async (\n  db: IDBPDatabase,\n  handleProgress?: (progress: number) => void\n) => {\n  return addDataToDB<KanjiCharacter>(\n    'dict/kanjidic2.json.gz',\n    db,\n    [\n      'allKanji',\n      {\n        storeName: 'kanjiQueryStore',\n        entryHandler: ({ literal, readingMeaning }) => {\n          const reading = readingMeaning?.flatMap((meaningGroupOrNanori) => {\n            if ('value' in meaningGroupOrNanori) {\n              return [meaningGroupOrNanori.value]\n            } else {\n              return (\n                meaningGroupOrNanori.reading\n                  // We filter this when we build the dictionary\n                  // .filter(({ type }) => type === 'ja_kun' || type === 'ja_on')\n                  .map(({ value }) => toHiragana(value))\n              )\n            }\n          })\n\n          if (reading && reading.length > 0) {\n            return { literal, reading }\n          }\n        }\n      }\n    ],\n    handleProgress\n  )\n}\n\nexport const addPhrasesToDB = async (\n  db: IDBPDatabase,\n  handleProgress?: (progress: number) => void\n) => {\n  return addDataToDB<JMEntry>(\n    'dict/JMdict.json.gz',\n    db,\n    [\n      'allPhrases',\n      {\n        storeName: 'phraseQueryStore',\n        entryHandler: (phrase) => {\n          const queryJP: {\n            sequenceNumber: number\n            exact: string[]\n            partial: string[]\n          } = {\n            sequenceNumber: phrase.sequenceNumber,\n            exact: [],\n            partial: []\n          }\n\n          for (const { value } of [...phrase.kanji, ...phrase.reading]) {\n            const hiragana = toHiragana(value)\n\n            queryJP.exact.push(hiragana)\n            for (let i = 1; i < hiragana.length; i++) {\n              queryJP.partial.push(hiragana.substring(i))\n            }\n          }\n\n          for (const meaning of phrase.sense.flatMap(({ glossary }) =>\n            glossary.flatMap(({ value }) => value)\n          )) {\n            const lower = meaning.toLowerCase()\n            /**\n             * Captures each word in the meaning (single quote allowed) except\n             * for the first word.\n             */\n            const wordRegexp = /\\b(?!^)[\\w']+\\b/g\n\n            queryJP.exact.push(lower)\n\n            for (const { index } of Array.from(lower.matchAll(wordRegexp))) {\n              if (index !== undefined) {\n                queryJP.partial.push(lower.substring(index))\n              }\n            }\n          }\n\n          return queryJP\n        }\n      }\n    ],\n    handleProgress\n  )\n}\n\nexport const addDataIfNeeded = async (\n  db: IDBPDatabase,\n  handleProgress?: (progress: number) => void\n) => {\n  const promises = []\n  let kanjiProgress = 0\n  let phraseProgress = 0\n\n  if ((await db.count('allKanji')) < totalKanji) {\n    promises.push(\n      addKanjiToDB(db, (progress) => {\n        kanjiProgress = progress\n\n        if (handleProgress) {\n          handleProgress(kanjiProgress + phraseProgress)\n        }\n      })\n    )\n  } else {\n    kanjiProgress = totalKanji\n  }\n  if ((await db.count('allPhrases')) < totalPhrases) {\n    promises.push(\n      addPhrasesToDB(db, (progress) => {\n        phraseProgress = progress\n\n        if (handleProgress) {\n          handleProgress(kanjiProgress + phraseProgress)\n        }\n      })\n    )\n  } else {\n    phraseProgress = totalPhrases\n  }\n\n  await Promise.all(promises)\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"White\",\n  cx: 512,\n  cy: 512,\n  r: 507,\n  fill: \"#ffffff\",\n  stroke: \"#cccccc\",\n  strokeWidth: 10\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  id: \"Yolk\",\n  cx: 512,\n  cy: 512,\n  r: 200,\n  fill: \"#ffb43b\"\n}));\n\nfunction SvgIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 1024 1024\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgIcon);\nexport default __webpack_public_path__ + \"static/media/icon.b8f19d44.svg\";\nexport { ForwardRef as ReactComponent };","import { FC, useCallback, useEffect, useState } from 'react'\nimport initDB from '../../dictionary'\nimport {\n  addDataIfNeeded,\n  totalKanji,\n  totalPhrases\n} from '../../dictionary/add-data'\nimport { ReactComponent as Icon } from '../icon.svg'\nimport './Landing.scss'\n\nexport interface BeforeInstallPromptEvent extends Event {\n  prompt: () => Promise<void>\n}\n\nconst Landing: FC = () => {\n  const [installed, setInstalled] = useState(true)\n  const [installing, setInstalling] = useState(false)\n  const [progress, setProgress] = useState(0)\n\n  // Can the UA install PWAs?\n  const canInstall = 'serviceWorker' in navigator && 'indexedDB' in window\n  const [\n    installPromptEvent,\n    setInstallPromptEvent\n  ] = useState<BeforeInstallPromptEvent | null>(null)\n\n  useEffect(() => {\n    if (canInstall) {\n      initDB().then(async (db) => {\n        const kanjiCount = await db.count('allKanji')\n        const phraseCount = await db.count('allPhrases')\n\n        if (kanjiCount < totalKanji || phraseCount < totalPhrases) {\n          setInstalled(false)\n        }\n      })\n    } else {\n      setInstalled(false)\n    }\n  }, [canInstall])\n\n  // If the user can be prompted to install the app, we want to do that.\n  useEffect(() => {\n    const handler = (e: Event) => {\n      e.preventDefault()\n\n      setInstallPromptEvent((e as unknown) as BeforeInstallPromptEvent)\n    }\n\n    window.addEventListener('beforeinstallprompt', handler)\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handler)\n    }\n  }, [])\n\n  // If the app should be installed, we should add the data to the db and prompt\n  // the user to install the standalone PWA.\n  const handleInstall = useCallback(() => {\n    if (installed || !canInstall || installing) {\n      return\n    }\n\n    setInstalling(true)\n    initDB()\n      .then((db) =>\n        addDataIfNeeded(db, (progress) => {\n          setProgress(\n            Math.floor((100 * progress) / (totalKanji + totalPhrases))\n          )\n        })\n      )\n      .then(() => {\n        if (installPromptEvent !== null) {\n          installPromptEvent.prompt()\n        }\n        setInstalled(true)\n      })\n  }, [installPromptEvent, installed, canInstall, installing])\n\n  return (\n    <div\n      className={['Landing', installed && 'installed']\n        .filter(Boolean) // removes falsy classnames\n        .join(' ')}\n    >\n      <div className=\"content\">\n        <h1>こんにちは!</h1>\n        <p>\n          This is Kamatama Jisho, a Japanese-English phrase book powered by the\n          web!\n        </p>\n        {canInstall ? (\n          <>\n            <p>\n              To install Kamatama Jisho, just press the big egg down below. The\n              dictionary download is about 10.5MB.\n            </p>\n            <p>\n              The download will likely be quite fast, but the data must then be\n              loaded into the database. This could take a long time. (3-4 mins)\n            </p>\n            <p>\n              For more information, check out{' '}\n              <a href=\"https://github.com/chrismilson/kamatama#installation\">\n                this link\n              </a>\n              .\n            </p>\n          </>\n        ) : (\n          <p>\n            Uh oh! The device you are using is not capable of installing{' '}\n            <a href=\"https://en.wikipedia.org/wiki/Progressive_web_application\">\n              PWAs\n            </a>\n            . Perhaps try a different device, or a different browser!\n          </p>\n        )}\n      </div>\n      {canInstall && (\n        <button className=\"icon\">\n          <div\n            className={['progress', installing && 'visible']\n              .filter(Boolean)\n              .join(' ')}\n          >\n            {progress}%\n          </div>\n          <Icon onClick={handleInstall} />\n        </button>\n      )}\n    </div>\n  )\n}\n\nexport default Landing\n","import { useEffect, useRef } from 'react'\n\n/**\n * Provides the value of a target parameter on the previous **render** (Even if\n * the target is unchanged).\n *\n * @param target The value to track\n */\nfunction usePrevious<T>(target: T): T | undefined {\n  const prevRef = useRef<T | undefined>()\n\n  useEffect(() => {\n    prevRef.current = target\n  }, [target])\n\n  return prevRef.current\n}\n\nexport default usePrevious\n","import { IDBPDatabase } from 'idb'\nimport { makeAutoObservable, runInAction } from 'mobx'\nimport { toHiragana } from 'wanakana'\nimport initDB from '../dictionary'\nimport { JMEntry } from '../types/JMEntry'\nimport { KanjiCharacter } from '../types/Kanji'\n\n/**\n * Represents a store of the app's state.\n */\nexport class KamatamaJishoStore {\n  /** The current search query. */\n  query: string\n  dbPromise: Promise<IDBPDatabase>\n\n  /**\n   * A counter to increment on result fetching.\n   *\n   * If the results come back and the counter has been increased, we should\n   * abandon the results.\n   */\n  phraseQueryIDPool: number\n  phraseResults: JMEntry[]\n\n  /**\n   * See `phraseQueryIDPool`.\n   */\n  entryQueryIDPool: number\n  /**\n   * The currently selected entry. Will be undefined if there is no selected\n   * entry.\n   */\n  currentEntry?: JMEntry\n\n  /**\n   * See `phraseQueryIDPool`.\n   */\n  kanjiQueryIDPool: number\n  kanjiResults: KanjiCharacter[]\n\n  /**\n   * Indicates whether the user is searching by radical or not.\n   */\n  searchByRadical: boolean\n  radicalRequestIDPool: number\n  /** A set of the radicals that the target kanji contains. */\n  radicalQuery: Set<string>\n  /**\n   * Keeps a count of how many of the currently queried radicals are in each\n   * kanji.\n   */\n  radicalMultiset: { [kanji: string]: number }\n  /**\n   * An array containing the kanji whose count in the multiset is equal to the\n   * number of queried radicals. This will be the kanji who contain all queried\n   * radicals.\n   */\n  radicalResult: KanjiCharacter[]\n\n  constructor() {\n    makeAutoObservable(this)\n\n    this.query = ''\n    this.dbPromise = initDB()\n\n    this.phraseQueryIDPool = 0\n    this.phraseResults = []\n\n    this.entryQueryIDPool = 0\n    // this.currentEntry = undefined\n\n    this.kanjiQueryIDPool = 0\n    this.kanjiResults = []\n\n    this.searchByRadical = true\n    this.radicalRequestIDPool = 0\n    this.radicalQuery = new Set()\n    this.radicalMultiset = {}\n    this.radicalResult = []\n\n    if (process.env.NODE_ENV === 'development') {\n      this.toggleRadicalQuery('囗')\n    }\n  }\n\n  setQuery(updateFactory: string | ((priorQuery: string) => string)) {\n    if (updateFactory instanceof Function) {\n      this.query = updateFactory(this.query)\n    } else {\n      this.query = updateFactory\n    }\n    this.fetchPhraseResults(\n      toHiragana(this.query.toLowerCase(), { passRomaji: true })\n    )\n    this.fetchKanjiResults(toHiragana(this.query, { passRomaji: true }))\n  }\n\n  async setCurrentEntry(sequenceNumber: number) {\n    if (sequenceNumber === -1) {\n      runInAction(() => {\n        this.currentEntry = undefined\n      })\n      return\n    }\n    const requestID = ++this.entryQueryIDPool\n    const db = await this.dbPromise\n\n    const tx = db.transaction('allPhrases')\n\n    const result = await tx.store.get(sequenceNumber)\n    await tx.done\n\n    if (this.entryQueryIDPool === requestID) {\n      runInAction(() => {\n        this.currentEntry = result\n      })\n    }\n  }\n\n  async toggleRadicalQuery(radical: string) {\n    let change: number\n    if (this.radicalQuery.has(radical)) {\n      change = -1\n      this.radicalQuery.delete(radical)\n    } else {\n      change = 1\n      this.radicalQuery.add(radical)\n    }\n\n    for (const literal of await this.fetchKanjiByRadical(radical)) {\n      if (!(literal in this.radicalMultiset)) {\n        this.radicalMultiset[literal] = 0\n      }\n\n      this.radicalMultiset[literal] += change\n\n      if (this.radicalMultiset[literal] === 0) {\n        delete this.radicalMultiset[literal]\n      }\n    }\n\n    await this.updateRadicalResults()\n  }\n\n  private async updateRadicalResults() {\n    const target = this.radicalQuery.size\n    if (target === 0) {\n      this.radicalResult = []\n    }\n\n    const literals = Object.entries(this.radicalMultiset)\n      .filter(([kanji, count]) => count === target)\n      .map(([kanji, count]) => kanji)\n\n    const requestID = ++this.radicalRequestIDPool\n    const db = await this.dbPromise\n    const tx = db.transaction('allKanji')\n\n    const result = await Promise.all(\n      literals.map((literal) => tx.store.get(literal))\n    )\n\n    if (requestID === this.radicalRequestIDPool) {\n      runInAction(() => {\n        this.radicalResult = result\n      })\n    }\n  }\n\n  private async fetchKanjiByRadical(radical: string) {\n    const db = await this.dbPromise\n    const tx = db.transaction('allKanji')\n\n    return tx.store.index('radical').getAllKeys(radical) as Promise<string[]>\n  }\n\n  private async fetchKanjiResults(query: string) {\n    if (query === '') {\n      runInAction(() => {\n        this.kanjiResults = []\n      })\n      return\n    }\n    const requestID = ++this.kanjiQueryIDPool\n    const allLiterals = new Set<string>()\n\n    const db = await this.dbPromise\n\n    // Get the literals by searching for their reaadings.\n    const queryTx = db.transaction('kanjiQueryStore')\n\n    await queryTx.store\n      .index('reading')\n      .getAll(query)\n      .then((matches) =>\n        matches.forEach(({ literal }) => allLiterals.add(literal))\n      )\n\n    await queryTx.done\n\n    // Now get the characters by their literals.\n    const results: KanjiCharacter[] = []\n\n    const kanjiTx = db.transaction('allKanji')\n\n    await Promise.all(\n      Array.from(allLiterals).map(async (literal) => {\n        const kanji = await kanjiTx.store.get(literal)\n\n        results.push(kanji)\n      })\n    )\n\n    if (requestID === this.kanjiQueryIDPool) {\n      runInAction(() => {\n        this.kanjiResults = results\n      })\n    }\n  }\n\n  /**\n   * Searches the phrases for any matches to the given query and updates the\n   * results when done.\n   */\n  private async fetchPhraseResults(query: string) {\n    if (query === '') {\n      runInAction(() => {\n        this.phraseResults = []\n      })\n      return\n    }\n    const requestID = ++this.phraseQueryIDPool\n\n    const sequenceNumbers = new Set<number>()\n\n    await this.fetchExactSequenceNumbers(query, sequenceNumbers)\n    await this.fetchPartialSequenceNumbers(query, sequenceNumbers)\n\n    const db = await this.dbPromise\n    const tx = db.transaction('allPhrases')\n\n    const results: JMEntry[] = []\n\n    await Promise.all(\n      Array.from(sequenceNumbers).map(async (number) => {\n        const entry = await tx.store.get(number)\n\n        results.push(entry)\n      })\n    )\n\n    if (requestID === this.phraseQueryIDPool) {\n      runInAction(() => {\n        this.phraseResults = results\n      })\n    }\n  }\n\n  /**\n   * Searches the query store to find any exact matches.\n   *\n   * @param query The query to match exactly\n   * @param sequenceNumbers A set to populate with the results of the query.\n   */\n  private async fetchExactSequenceNumbers(\n    query: string,\n    sequenceNumbers: Set<number>\n  ) {\n    const db = await this.dbPromise\n\n    const tx = db.transaction('phraseQueryStore')\n\n    await tx.store\n      .index('exact')\n      .getAll(query)\n      .then((matches) => {\n        matches.forEach(({ sequenceNumber }) => {\n          sequenceNumbers.add(sequenceNumber)\n        })\n      })\n\n    await tx.done\n  }\n\n  /**\n   * Searches the query store to find any partial matches.\n   *\n   * @param query The query to match exactly\n   * @param sequenceNumbers A set to populate with the results of the query.\n   */\n  private async fetchPartialSequenceNumbers(\n    query: string,\n    sequenceNumbers: Set<number>\n  ) {\n    const db = await this.dbPromise\n\n    const tx = db.transaction('phraseQueryStore')\n\n    await Promise.all([\n      tx.store\n        .index('exact')\n        .getAll(IDBKeyRange.bound(query, query + '\\uffff'), 30)\n        .then((matches) => {\n          matches.forEach(({ sequenceNumber }) => {\n            sequenceNumbers.add(sequenceNumber)\n          })\n        }),\n      tx.store\n        .index('partial')\n        .getAll(IDBKeyRange.bound(query, query + '\\uffff'), 30)\n        .then((matches) => {\n          matches.forEach(({ sequenceNumber }) => {\n            sequenceNumbers.add(sequenceNumber)\n          })\n        })\n    ])\n\n    await tx.done\n  }\n}\n\nconst store = new KamatamaJishoStore()\nexport default store\n","import { FC } from 'react'\nimport { JMSense } from '../../../types/JMEntry'\n\nconst humanReadablePartOfSpeech = {\n  'adj-f': 'noun or verb acting prenominally',\n  'adj-i': 'adjective (keiyoushi)',\n  'adj-ix': 'adjective (keiyoushi) - yoi/ii class',\n  'adj-kari': \"'kari' adjective (archaic)\",\n  'adj-ku': \"'ku' adjective (archaic)\",\n  'adj-na': 'adjectival nouns or quasi-adjectives (keiyodoshi)',\n  'adj-nari': 'archaic/formal form of na-adjective',\n  'adj-no': \"nouns which may take the genitive case particle 'no'\",\n  'adj-pn': 'pre-noun adjectival (rentaishi)',\n  'adj-shiku': \"'shiku' adjective (archaic)\",\n  'adj-t': \"'taru' adjective\",\n  adv: 'adverb (fukushi)',\n  'adv-to': \"adverb taking the 'to' particle\",\n  aux: 'auxiliary',\n  'aux-adj': 'auxiliary adjective',\n  'aux-v': 'auxiliary verb',\n  conj: 'conjunction',\n  cop: 'copula',\n  ctr: 'counter',\n  exp: 'expressions (phrases, clauses, etc.)',\n  int: 'interjection (kandoushi)',\n  n: 'noun (common) (futsuumeishi)',\n  'n-adv': 'adverbial noun (fukushitekimeishi)',\n  'n-pr': 'proper noun',\n  'n-pref': 'noun, used as a prefix',\n  'n-suf': 'noun, used as a suffix',\n  'n-t': 'noun (temporal) (jisoumeishi)',\n  num: 'numeric',\n  pn: 'pronoun',\n  pref: 'prefix',\n  prt: 'particle',\n  suf: 'suffix',\n  unc: 'unclassified',\n  'v-unspec': 'verb unspecified',\n  v1: 'Ichidan verb',\n  'v1-s': 'Ichidan verb - kureru special class',\n  'v2a-s': \"Nidan verb with 'u' ending (archaic)\",\n  'v2b-k': \"Nidan verb (upper class) with 'bu' ending (archaic)\",\n  'v2b-s': \"Nidan verb (lower class) with 'bu' ending (archaic)\",\n  'v2d-k': \"Nidan verb (upper class) with 'dzu' ending (archaic)\",\n  'v2d-s': \"Nidan verb (lower class) with 'dzu' ending (archaic)\",\n  'v2g-k': \"Nidan verb (upper class) with 'gu' ending (archaic)\",\n  'v2g-s': \"Nidan verb (lower class) with 'gu' ending (archaic)\",\n  'v2h-k': \"Nidan verb (upper class) with 'hu/fu' ending (archaic)\",\n  'v2h-s': \"Nidan verb (lower class) with 'hu/fu' ending (archaic)\",\n  'v2k-k': \"Nidan verb (upper class) with 'ku' ending (archaic)\",\n  'v2k-s': \"Nidan verb (lower class) with 'ku' ending (archaic)\",\n  'v2m-k': \"Nidan verb (upper class) with 'mu' ending (archaic)\",\n  'v2m-s': \"Nidan verb (lower class) with 'mu' ending (archaic)\",\n  'v2n-s': \"Nidan verb (lower class) with 'nu' ending (archaic)\",\n  'v2r-k': \"Nidan verb (upper class) with 'ru' ending (archaic)\",\n  'v2r-s': \"Nidan verb (lower class) with 'ru' ending (archaic)\",\n  'v2s-s': \"Nidan verb (lower class) with 'su' ending (archaic)\",\n  'v2t-k': \"Nidan verb (upper class) with 'tsu' ending (archaic)\",\n  'v2t-s': \"Nidan verb (lower class) with 'tsu' ending (archaic)\",\n  'v2w-s':\n    \"Nidan verb (lower class) with 'u' ending and 'we' conjugation (archaic)\",\n  'v2y-k': \"Nidan verb (upper class) with 'yu' ending (archaic)\",\n  'v2y-s': \"Nidan verb (lower class) with 'yu' ending (archaic)\",\n  'v2z-s': \"Nidan verb (lower class) with 'zu' ending (archaic)\",\n  v4b: \"Yodan verb with 'bu' ending (archaic)\",\n  v4g: \"Yodan verb with 'gu' ending (archaic)\",\n  v4h: \"Yodan verb with 'hu/fu' ending (archaic)\",\n  v4k: \"Yodan verb with 'ku' ending (archaic)\",\n  v4m: \"Yodan verb with 'mu' ending (archaic)\",\n  v4n: \"Yodan verb with 'nu' ending (archaic)\",\n  v4r: \"Yodan verb with 'ru' ending (archaic)\",\n  v4s: \"Yodan verb with 'su' ending (archaic)\",\n  v4t: \"Yodan verb with 'tsu' ending (archaic)\",\n  v5aru: 'Godan verb - -aru special class',\n  v5b: \"Godan verb with 'bu' ending\",\n  v5g: \"Godan verb with 'gu' ending\",\n  v5k: \"Godan verb with 'ku' ending\",\n  'v5k-s': 'Godan verb - Iku/Yuku special class',\n  v5m: \"Godan verb with 'mu' ending\",\n  v5n: \"Godan verb with 'nu' ending\",\n  v5r: \"Godan verb with 'ru' ending\",\n  'v5r-i': \"Godan verb with 'ru' ending (irregular verb)\",\n  v5s: \"Godan verb with 'su' ending\",\n  v5t: \"Godan verb with 'tsu' ending\",\n  v5u: \"Godan verb with 'u' ending\",\n  'v5u-s': \"Godan verb with 'u' ending (special class)\",\n  v5uru: 'Godan verb - Uru old class verb (old form of Eru)',\n  vi: 'intransitive verb',\n  vk: 'Kuru verb - special class',\n  vn: 'irregular nu verb',\n  vr: 'irregular ru verb, plain form ends with -ri',\n  vs: 'noun or participle which takes the aux. verb suru',\n  'vs-c': 'su verb - precursor to the modern suru',\n  'vs-i': 'suru verb - included',\n  'vs-s': 'suru verb - special class',\n  vt: 'transitive verb',\n  vz: 'Ichidan verb - zuru verb (alternative form of -jiru verbs)'\n}\n\nconst humanReadableField = {\n  agric: 'agriculture',\n  anat: 'anatomy',\n  archeol: 'archeology',\n  archit: 'architecture, building',\n  art: 'art, aesthetics',\n  astron: 'astronomy',\n  audvid: 'audio-visual',\n  aviat: 'aviation',\n  baseb: 'baseball',\n  biochem: 'biochemistry',\n  biol: 'biology',\n  bot: 'botany',\n  Buddh: 'Buddhism',\n  bus: 'business',\n  chem: 'chemistry',\n  Christn: 'Christianity',\n  comp: 'computing',\n  cryst: 'crystallography',\n  ecol: 'ecology',\n  econ: 'economics',\n  elec: 'electricity, elec. eng.',\n  electr: 'electronics',\n  embryo: 'embryology',\n  engr: 'engineering',\n  ent: 'entomology',\n  finc: 'finance',\n  fish: 'fishing',\n  food: 'food, cooking',\n  gardn: 'gardening, horticulture',\n  genet: 'genetics',\n  geogr: 'geography',\n  geol: 'geology',\n  geom: 'geometry',\n  go: 'go (game)',\n  golf: 'golf',\n  gramm: 'grammar',\n  grmyth: 'Greek mythology',\n  hanaf: 'hanafuda',\n  horse: 'horse-racing',\n  law: 'law',\n  ling: 'linguistics',\n  logic: 'logic',\n  MA: 'martial arts',\n  mahj: 'mahjong',\n  math: 'mathematics',\n  mech: 'mechanical engineering',\n  med: 'medicine',\n  met: 'climate, weather',\n  mil: 'military',\n  music: 'music',\n  ornith: 'ornithology',\n  paleo: 'paleontology',\n  pathol: 'pathology',\n  pharm: 'pharmacy',\n  phil: 'philosophy',\n  photo: 'photography',\n  physics: 'physics',\n  physiol: 'physiology',\n  print: 'printing',\n  psych: 'psychology, psychiatry',\n  Shinto: 'Shinto',\n  shogi: 'shogi',\n  sports: 'sports',\n  stat: 'statistics',\n  sumo: 'sumo',\n  telec: 'telecommunications',\n  tradem: 'trademark',\n  vidg: 'video game',\n  zool: 'zoology'\n}\n\nconst humanReadableMisc = {\n  abbr: 'abbreviation',\n  arch: 'archaism',\n  char: 'character',\n  chn: \"children's language\",\n  col: 'colloquialism',\n  company: 'company name',\n  creat: 'creature',\n  dated: 'dated term',\n  dei: 'deity',\n  derog: 'derogatory',\n  ev: 'event',\n  fam: 'familiar language',\n  fem: 'female term or language',\n  fict: 'fiction',\n  given: 'given name or forename, gender not specified',\n  hist: 'historical term',\n  hon: 'honorific or respectful (sonkeigo) language',\n  hum: 'humble (kenjougo) language',\n  id: 'idiomatic expression',\n  joc: 'jocular, humorous term',\n  leg: 'legend',\n  litf: 'literary or formal term',\n  'm-sl': 'manga slang',\n  male: 'male term or language',\n  myth: 'mythology',\n  'net-sl': 'Internet slang',\n  obj: 'object',\n  obs: 'obsolete term',\n  obsc: 'obscure term',\n  'on-mim': 'onomatopoeic or mimetic word',\n  organization: 'organization name',\n  oth: 'other',\n  person: 'full name of a particular person',\n  place: 'place name',\n  poet: 'poetical term',\n  pol: 'polite (teineigo) language',\n  product: 'product name',\n  proverb: 'proverb',\n  quote: 'quotation',\n  rare: 'rare',\n  relig: 'religion',\n  sens: 'sensitive',\n  serv: 'service',\n  sl: 'slang',\n  station: 'railway station',\n  surname: 'family or surname',\n  uk: 'word usually written using kana alone',\n  unclass: 'unclassified name',\n  vulg: 'vulgar expression or word',\n  work: 'work of art, literature, music, etc. name',\n  X: 'rude or X-rated term (not displayed in educational software)',\n  yoji: 'yojijukugo'\n}\n\nconst Meaning: FC<JMSense> = ({\n  kanji,\n  reading,\n  partOfSpeech,\n  reference,\n  field,\n  misc,\n  glossary\n}) => {\n  return (\n    <li className=\"Meaning\">\n      {kanji.length + reading.length > 0 && (\n        <span className=\"info restriction\">\n          Meaning restricted to {[...kanji, ...reading].join(', ')}\n        </span>\n      )}\n      {partOfSpeech.length > 0 && (\n        <span className=\"info partOfSpeech\">\n          {partOfSpeech.map((pos) => humanReadablePartOfSpeech[pos]).join(', ')}\n        </span>\n      )}\n      {reference.length > 0 && (\n        <span className=\"info seeAlso\">See also: {reference.join(', ')}</span>\n      )}\n      {field.length > 0 && (\n        <span className=\"info field\">\n          Related to: {field.map((f) => humanReadableField[f]).join(', ')}\n        </span>\n      )}\n      {misc.length > 0 && (\n        <span className=\"info misc\">\n          {misc.map((m) => humanReadableMisc[m]).join(', ')}\n        </span>\n      )}\n      {glossary.length > 0 && (\n        <div className=\"glossary\">\n          {glossary.map(({ value }) => (\n            <div className=\"item\" key={value}>\n              {value}\n            </div>\n          ))}\n        </div>\n      )}\n    </li>\n  )\n}\n\nexport default Meaning\n","import { FC } from 'react'\nimport { JMEntry } from '../../../types/JMEntry'\nimport Meaning from './Meaning'\n\nconst Word: FC<JMEntry> = ({ kanji, reading, sense }) => {\n  return (\n    <div className=\"PhraseData\">\n      <ul className=\"kanjis\">\n        {kanji.map(({ value }) => (\n          <li key={value}>{value}</li>\n        ))}\n      </ul>\n      {kanji.length > 0 && reading.length > 0 && <h2>Reading</h2>}\n      <ul className=\"readings\">\n        {reading.map(({ value }) => (\n          <li key={value}>{value}</li>\n        ))}\n      </ul>\n      <h2>Meaning</h2>\n      <ul className=\"meanings\">\n        {sense.map((sense, i) => (\n          <Meaning key={i} {...sense} />\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default Word\n","import { observer } from 'mobx-react-lite'\nimport { FC, useCallback, useEffect } from 'react'\nimport usePrevious from '../../../hooks/usePrevious'\nimport store from '../../../state'\nimport './Phrase.scss'\nimport Word from './PhraseData'\n\n/**\n * A page that contains the data for a phrase.\n */\nconst Phrase: FC = observer(() => {\n  const entry = store.currentEntry\n  const prevEntry = usePrevious(entry)\n  const display = entry || prevEntry\n\n  const closeHandler = useCallback(() => {\n    store.setCurrentEntry(-1)\n  }, [])\n\n  useEffect(() => {\n    const handler = (e: KeyboardEvent) => {\n      if (e.key === 'Esc' || e.key === 'Escape') {\n        closeHandler()\n      }\n    }\n\n    window.addEventListener('keydown', handler)\n    return () => {\n      window.removeEventListener('keydown', handler)\n    }\n  }, [closeHandler])\n\n  return (\n    <div className={['Phrase', entry && 'valid'].filter(Boolean).join(' ')}>\n      <button onClick={closeHandler}>close</button>\n      {display && <Word {...display} />}\n    </div>\n  )\n})\n\nexport default Phrase\n","import { runInAction } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport { FC } from 'react'\nimport store from '../../../state'\nimport {\n  KanjiCharacter,\n  KanjiReadingMeaning,\n  KanjiReadingMeaningGroup\n} from '../../../types/Kanji'\nimport './RadicalResultList.scss'\n\nconst RadicalResultListItem: FC<KanjiCharacter> = ({\n  literal,\n  readingMeaning\n}) => {\n  return (\n    <div\n      className=\"RadicalResultListItem\"\n      onClick={() => {\n        store.setQuery((old) => old + literal)\n        runInAction(() => {\n          store.searchByRadical = false\n        })\n      }}\n    >\n      <div className=\"literal\">{literal}</div>\n      <div className=\"info\">\n        <div className=\"reading\">\n          {readingMeaning\n            ?.flatMap((meaningGroupOrNanori) => {\n              if ('value' in meaningGroupOrNanori) {\n                return [meaningGroupOrNanori.value]\n              } else {\n                return meaningGroupOrNanori.reading.map(\n                  (reading) => reading.value\n                )\n              }\n            })\n            .join('、')}\n        </div>\n        <div className=\"meaning\">\n          {readingMeaning\n            ?.filter((possiblyNanori) => !('value' in possiblyNanori))\n            .flatMap((meaningGroup) =>\n              (meaningGroup as KanjiReadingMeaningGroup).meaning.map(\n                (meaning) => meaning.value\n              )\n            )\n            .join(', ')}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst RadicalResultList: FC = observer(() => {\n  const allKanji = store.radicalResult.slice(0, 30)\n\n  return (\n    <div className=\"RadicalResultList\">\n      {allKanji.map((kanji) => (\n        <RadicalResultListItem key={kanji.literal} {...kanji} />\n      ))}\n    </div>\n  )\n})\n\nexport default RadicalResultList\n","/**\n * A list of the radicals by stroke count.\n */\nexport const radicalsByStrokeCount = [\n  '',\n  '一｜丶ノ乙亅', // 1\n  '二亠人⺅儿入ハ丷冂冖冫几凵刀⺉力勹匕匚十卜卩厂厶又マ九ユ乃', // 2 𠆢𠂉\n  '⻌口囗土士夂夕大女子宀寸小⺌尢尸屮山川巛工已巾干幺广廴廾弋弓ヨ彑彡彳⺖⺘⺡⺨⺾⻏⻖也亡及久', // 3\n  '⺹心戈戸手支攵文斗斤方无日曰月木欠止歹殳比毛氏气水火⺣爪父爻爿片牛犬⺭王元井勿尤五屯巴毋', // 4\n  '玄瓦甘生用田疋疒癶白皮皿目矛矢石示禸禾穴立⻂世巨冊母⺲牙', // 5\n  '瓜竹米糸缶羊羽而耒耳聿肉自至臼舌舟艮色虍虫血行衣西', // 6\n  '臣見角言谷豆豕豸貝赤走足身車辛辰酉釆里舛麦', // 7\n  '金長門隶隹雨青非奄岡免斉', // 8\n  '面革韭音頁風飛食首香品', // 9\n  '馬骨高髟鬥鬯鬲鬼竜韋', // 10\n  '魚鳥鹵鹿麻亀啇黄黒', // 11\n  '黍黹無歯', // 12\n  '黽鼎鼓鼠', // 13\n  '鼻齊', // 14\n  '',\n  '',\n  '龠' // 17\n].map((s) => s.split(''))\n","import { observer } from 'mobx-react-lite'\nimport { FC } from 'react'\nimport store from '../../../state'\nimport { radicalsByStrokeCount } from './common'\nimport './RadicalSearchBar.scss'\n\nconst RadicalButton: FC<{ radical: string }> = observer(({ radical }) => {\n  const selected = store.radicalQuery.has(radical)\n\n  return (\n    <button\n      className={['RadicalButton', selected && 'selected']\n        .filter(Boolean)\n        .join(' ')}\n      onClick={() => {\n        store.toggleRadicalQuery(radical)\n      }}\n    >\n      {radical}\n    </button>\n  )\n})\n\nconst RadicalSearchBar: FC = observer(() => {\n  return (\n    <div className=\"RadicalSearchBar\">\n      {radicalsByStrokeCount\n        .map((radicals, strokes): [string[], number] => [radicals, strokes])\n        .filter(([radicals, _strokes]) => radicals.length > 0)\n        .map(([radicals, strokeCount]) => (\n          <div className=\"radicalGroup\" key={strokeCount}>\n            <div className=\"strokeCount\">{strokeCount}</div>\n            <div className=\"radicals\">\n              {radicals.map((radical) => (\n                <RadicalButton key={radical} radical={radical} />\n              ))}\n            </div>\n          </div>\n        ))}\n    </div>\n  )\n})\n\nexport default RadicalSearchBar\n","import { FC } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport store from '../../../state'\nimport RadicalResultList from './RadicalResultList'\nimport RadicalSearchBar from './RadicalSearchBar'\nimport './RadicalSearch.scss'\nimport { runInAction } from 'mobx'\n\nconst RadicalSearch: FC = observer(() => {\n  const active = store.searchByRadical\n  return (\n    <div\n      className={['RadicalSearch', active && 'active']\n        .filter(Boolean)\n        .join(' ')}\n    >\n      <button\n        className=\"close\"\n        onClick={() => {\n          runInAction(() => {\n            store.searchByRadical = false\n          })\n        }}\n      >\n        close\n      </button>\n      <RadicalResultList />\n      <RadicalSearchBar />\n    </div>\n  )\n})\n\nexport default RadicalSearch\n","import { observer } from 'mobx-react-lite'\nimport { FC } from 'react'\nimport store from '../../../state'\nimport { JMEntry } from '../../../types/JMEntry'\nimport './PhraseResults.scss'\n\nconst PhraseResultListItem: FC<JMEntry> = observer(\n  ({ sequenceNumber, reading, kanji, sense }) => {\n    return (\n      <li\n        className=\"PhraseResultListItem\"\n        onClick={() => {\n          store.setCurrentEntry(sequenceNumber)\n        }}\n      >\n        <div className=\"forms\">\n          {\n            [...kanji, ...reading]\n              .sort((a, b) => a.priority.length - b.priority.length)\n              .map((form) => form.value)\n              .join('、') // We should join Japanese with the full width comma.\n          }\n        </div>\n        <div className=\"meanings\">\n          {sense\n            .flatMap((meaning) => meaning.glossary)\n            .map((glossary) => glossary.value)\n            .join(', ')}\n        </div>\n      </li>\n    )\n  }\n)\n\n/**\n * A list of the results for the current query.\n */\nconst PhraseResultList: FC = observer(() => {\n  const { phraseResults } = store\n\n  return (\n    <ul className=\"PhraseResultList\">\n      {phraseResults.map((phrase) => (\n        <PhraseResultListItem key={phrase.sequenceNumber} {...phrase} />\n      ))}\n    </ul>\n  )\n})\n\nexport default PhraseResultList\n","export default __webpack_public_path__ + \"static/media/icon.b8f19d44.svg\";","export default __webpack_public_path__ + \"static/media/radical-search-icon.7b3effc6.svg\";","import { ChangeEvent, FC, useCallback, useEffect, useRef } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport store from '../../../state'\nimport icon from '../../icon.svg'\nimport radicalSearchIcon from './radical-search-icon.svg'\nimport './SearchBar.scss'\nimport { runInAction } from 'mobx'\n\nconst SearchBar: FC = observer(() => {\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    inputRef.current?.focus()\n  }, [])\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    store.setQuery(e.target.value)\n  }, [])\n\n  return (\n    <div className=\"SearchBar\">\n      <img className=\"icon\" src={icon} alt=\"icon\" />\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={store.query}\n        onChange={handleChange}\n        placeholder=\"Search here...\"\n      />\n      <img\n        className=\"Radicals\"\n        src={radicalSearchIcon}\n        alt=\"search by radical\"\n        onClick={() => {\n          runInAction(() => {\n            store.searchByRadical = true\n          })\n        }}\n      />\n    </div>\n  )\n})\n\nexport default SearchBar\n","import { FC } from 'react'\nimport PhraseResultList from './PhraseResults'\nimport PhraseSearchBar from './SearchBar'\nimport './PhraseSearch.scss'\n\nconst PhraseSearch: FC = () => {\n  return (\n    <div className=\"PhraseSearch\">\n      <PhraseSearchBar />\n      <PhraseResultList />\n    </div>\n  )\n}\n\nexport default PhraseSearch\n","import { FC } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport './App.scss'\n\nimport Landing from './components/Landing'\nimport Phrase from './components/Phrase'\nimport RadicalSearch from './components/RadicalSearch'\nimport PhraseSearch from './components/PhraseSearch'\n\nconst App: FC = observer(() => {\n  return (\n    <div className=\"App\">\n      <Landing />\n      <Phrase />\n      <RadicalSearch />\n      <PhraseSearch />\n    </div>\n  )\n})\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nconst windowLoad = new Promise<void>((resolve) => {\n  const wrap = () => {\n    resolve()\n    window.removeEventListener('load', wrap)\n  }\n  window.addEventListener('load', wrap)\n})\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    windowLoad.then(() => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './ui/App'\nimport reportWebVitals from './reportWebVitals'\nimport { register } from './serviceWorkerRegistration'\nimport './index.scss'\nimport '@stardazed/streams-polyfill'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\nregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}