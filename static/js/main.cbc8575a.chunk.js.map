{"version":3,"sources":["dictionary/json-iterator.ts","dictionary/add-data.ts","dictionary/index.ts","state/index.ts","ui/components/ResultsView.tsx","ui/components/SearchBar.tsx","ui/App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["jsonIterator","url","a","decoder","TextDecoder","fetch","body","getReader","reader","open","inString","remaining","read","value","done","chunk","decode","lastBase","result","i","length","s","substring","push","JSON","parse","console","log","getMediaUrl","filePath","path","join","addKanjiToDB","db","kanjiGroup","tx","transaction","Promise","all","map","kanji","store","put","addPhrasesToDB","phraseGroup","phrase","objectStore","sequenceNumber","values","reading","concat","addAllDataToDB","initDB","openDB","upgrade","_","version","allKanji","createObjectStore","keyPath","allPhrases","queryStore","createIndex","multiEntry","catch","error","query","loadingResults","results","request","dbPromise","makeAutoObservable","this","updateFactory","Function","fetchResults","runInAction","requestID","fetchSequenceNumbers","sequenceNumbers","Array","from","number","get","entry","allSequenceNumbers","Set","index","getAll","IDBKeyRange","bound","then","forEach","add","JMEntryView","obj","className","stringify","ResultsView","observer","SearchBar","handleChange","useCallback","e","setQuery","target","type","onChange","App","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cbc8575a.chunk.js","sourcesContent":["/**\n * Fetches a json file and iterates over all of the base objects.\n *\n * This parser is opinionated and makes assumptions about the data. Make sure\n * you understand how it works before you go ahead and copy/paste it into your\n * own project.\n *\n * @param url The url of the external json file\n */\nexport default async function* jsonIterator<T = any>(url: string) {\n  const decoder = new TextDecoder('utf-8')\n\n  const reader = (await fetch(url)).body?.getReader()\n  if (!reader) {\n    return\n  }\n\n  // Counts the number of un-closed, open braces.\n  let open = 0\n\n  // A flag that reveals whether we are currently within a string.\n  let inString = false\n\n  // The start of a yet unclosed JSON object.\n  let remaining = ''\n\n  while (true) {\n    const { value, done } = await reader.read()\n    if (done) {\n      break\n    }\n    const chunk = value ? decoder.decode(value) : ''\n    let lastBase = -1\n    const result: T[] = []\n\n    for (let i = 0; i < chunk.length; i++) {\n      if (inString) {\n        if (chunk[i] === '\"') {\n          inString = false\n        } else if (chunk[i] === '\\\\') {\n          i += 1\n        }\n      } else if (chunk[i] === '\"') {\n        inString = true\n      } else if (chunk[i] === '{') {\n        if (open === 0) {\n          lastBase = i\n        }\n        open += 1\n      } else if (chunk[i] === '}') {\n        open -= 1\n        if (open === 0) {\n          if (lastBase < 0) {\n            const s = remaining + chunk.substring(0, i + 1)\n            try {\n              result.push(JSON.parse(remaining + chunk.substring(0, i + 1)))\n            } catch (e) {\n              console.log(s)\n              return\n            }\n          } else {\n            const s = chunk.substring(lastBase, i + 1)\n            try {\n              result.push(JSON.parse(chunk.substring(lastBase, i + 1)))\n            } catch (e) {\n              console.log(s)\n              return\n            }\n          }\n        }\n      }\n    }\n\n    yield result\n\n    if (open > 0) {\n      if (lastBase < 0) {\n        remaining += chunk\n      } else {\n        remaining = chunk.substring(lastBase)\n      }\n    }\n  }\n}\n","import { IDBPDatabase } from 'idb'\nimport { JMEntry } from '../types/JMEntry'\nimport { KanjiCharacter } from '../types/Kanji'\nimport jsonIterator from './json-iterator'\nimport path from 'path'\n\n/**\n * Calculates a url for github's media service.\n *\n * The url will have the form:\n *\n * > https://media.githubusercontent.com/media/_Username_/_Project_/_Branch_/_Path_to_file_\n */\nconst getMediaUrl = (filePath: string) => {\n  const baseUrl = 'https://media.githubusercontent.com/media/'\n  const userName = 'chrismilson'\n  const project = 'kamatama'\n  const branch = 'master'\n\n  return baseUrl + path.join(userName, project, branch, filePath)\n}\n\nexport const addKanjiToDB = async (db: IDBPDatabase) => {\n  if (process.env.NODE_ENV === 'development') {\n    return\n  }\n\n  console.log(getMediaUrl('dictionary/json/kanjidic2.json'))\n  for await (const kanjiGroup of jsonIterator<KanjiCharacter>(\n    getMediaUrl('dictionary/json/kanjidic2.json')\n  )) {\n    const tx = db.transaction('allKanji', 'readwrite')\n\n    await Promise.all(kanjiGroup.map((kanji) => tx.store.put(kanji)))\n\n    await tx.done\n  }\n}\n\nexport const addPhrasesToDB = async (db: IDBPDatabase) => {\n  if (process.env.NODE_ENV === 'development') {\n    return\n  }\n\n  for await (const phraseGroup of jsonIterator<JMEntry>(\n    getMediaUrl('dictionary/json/JMdict.json')\n  )) {\n    const tx = db.transaction(['allPhrases', 'queryStore'], 'readwrite')\n\n    await Promise.all([\n      phraseGroup.map((phrase) => {\n        return Promise.all([\n          tx.objectStore('allPhrases').put(phrase),\n          tx.objectStore('queryStore').put({\n            sequenceNumber: phrase.sequenceNumber,\n            values: phrase.reading\n              .map((reading) => reading.value)\n              .concat(phrase.kanji.map((kanji) => kanji.value))\n          })\n        ])\n      })\n    ])\n\n    await tx.done\n  }\n}\n\nexport const addAllDataToDB = async (db: IDBPDatabase) => {\n  return Promise.all([addKanjiToDB(db), addPhrasesToDB(db)])\n}\n\nexport default addAllDataToDB\n","import { openDB } from 'idb'\nimport addAllDataToDB from './add-data'\n\nconst initDB = async () => {\n  return openDB('kamatama', 1, {\n    upgrade: async (db, _, version) => {\n      console.log(`Upgrading database to version ${version}.`)\n\n      const allKanji = db.createObjectStore('allKanji', { keyPath: 'literal' })\n\n      const allPhrases = db.createObjectStore('allPhrases', {\n        keyPath: 'sequenceNumber'\n      })\n\n      const queryStore = db.createObjectStore('queryStore', {\n        keyPath: 'sequenceNumber'\n      })\n\n      queryStore.createIndex('queryStore', 'values', {\n        multiEntry: true\n      })\n\n      await Promise.all(\n        [allKanji, allPhrases, queryStore].map(\n          ({ transaction }) => transaction.done\n        )\n      ).catch(console.error)\n\n      await addAllDataToDB(db)\n\n      console.log(`Database upgraded to version ${version}`)\n    }\n  })\n}\n\nexport default initDB\n","import { IDBPDatabase } from 'idb'\nimport { makeAutoObservable, runInAction } from 'mobx'\nimport initDB from '../dictionary'\nimport { JMEntry } from '../types/JMEntry'\n\n/**\n * Represents a store of the app's state.\n */\nexport class KamatamaJishoStore {\n  /** The current search query. */\n  query: string\n  loadingResults: boolean\n  results: JMEntry[]\n  request: number\n  dbPromise: Promise<IDBPDatabase>\n\n  constructor() {\n    makeAutoObservable(this)\n\n    this.query = ''\n    this.loadingResults = false\n    this.results = []\n    this.request = 0\n    this.dbPromise = initDB()\n  }\n\n  setQuery(updateFactory: string | ((priorQuery: string) => string)) {\n    if (updateFactory instanceof Function) {\n      this.query = updateFactory(this.query)\n    } else {\n      this.query = updateFactory\n    }\n    this.fetchResults()\n  }\n\n  private async fetchResults() {\n    if (this.query === '') {\n      runInAction(() => {\n        this.results = []\n      })\n      return\n    }\n\n    const requestID = ++this.request\n\n    const sequenceNumbers = await this.fetchSequenceNumbers()\n\n    const db = await this.dbPromise\n    const tx = db.transaction('allPhrases')\n\n    const results: JMEntry[] = []\n\n    await Promise.all(\n      Array.from(sequenceNumbers).map(async (number) => {\n        const entry = await tx.store.get(number)\n\n        results.push(entry)\n      })\n    )\n\n    if (requestID === this.request)\n      runInAction(() => {\n        this.results = results\n      })\n  }\n\n  private async fetchSequenceNumbers() {\n    const db = await this.dbPromise\n\n    const tx = db.transaction('queryStore')\n    const allSequenceNumbers = new Set<number>()\n\n    await tx.store\n      .index('queryStore')\n      .getAll(IDBKeyRange.bound(this.query, this.query + '\\uffff'), 50)\n      .then((results) => {\n        results.forEach((reading) => {\n          allSequenceNumbers.add(reading.sequenceNumber)\n        })\n      })\n\n    await tx.done\n\n    return allSequenceNumbers\n  }\n}\n\nconst store = new KamatamaJishoStore()\nexport default store\n","import { observer } from 'mobx-react-lite'\nimport { FC } from 'react'\nimport store from '../../state'\nimport { JMEntry } from '../../types/JMEntry'\n\nconst JMEntryView: FC<JMEntry> = (obj) => {\n  return (\n    <li className=\"Kanji ResultView\">\n      <pre>{JSON.stringify(obj, null, 2)}</pre>\n    </li>\n  )\n}\n\n/**\n * A list of the results for the current query.\n */\nconst ResultsView: FC<{\n  results: JMEntry[]\n}> = observer(() => {\n  const { results } = store\n\n  return (\n    <ul>\n      {results.map((result) => (\n        <JMEntryView key={result.sequenceNumber} {...result} />\n      ))}\n    </ul>\n  )\n})\n\nexport default ResultsView\n","import { ChangeEvent, FC, useCallback } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport store from '../../state'\n\nconst SearchBar: FC = observer(() => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    store.setQuery(e.target.value)\n  }, [])\n\n  return (\n    <div className=\"SearchBar\">\n      <input type=\"text\" value={store.query} onChange={handleChange} />\n    </div>\n  )\n})\n\nexport default SearchBar\n","import { FC } from 'react'\nimport ResultsView from './components/ResultsView'\nimport store from '../state'\nimport './App.css'\nimport { observer } from 'mobx-react-lite'\nimport SearchBar from './components/SearchBar'\n\nconst App: FC = observer(() => {\n  return (\n    <div className=\"App\">\n      <SearchBar />\n      <ResultsView results={store.results} />\n    </div>\n  )\n})\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { StrictMode } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './ui/App'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorkerRegistration'\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.register()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}